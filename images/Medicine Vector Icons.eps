%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Medicine Vector Icons.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Buba
%%CreationDate: 5/13/2020
%%BoundingBox: 0 0 1200 900
%%HiResBoundingBox: 0 0 1200 900
%%CropBox: 0 0 1200 900
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 10390 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFD86FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FDFCFFFD85FFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FDFCFFFD89
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FDFCFFFD85FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFAFFFA8FFAFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8AFA8FFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFC9A0CFFFFFA9FFC9C9A7FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD21FFCACAFD20FFA87DFFAFFD
%16FFCFC2C8C2CFFFFFC9C8C2C8CAFD36FFAFCBBCBDA8FD1EFF7D7DFFA9FF
%A8FD14FFCFC1C8A0C8C2CFC9C8C2C89FC8CAFD30FFAFFFAFFFAFFFFFCAC3
%FFFFFFAFFFAFFFAFFD16FF7EA87EA8FFFFFFAFFD13FFC9C8C2C8C2C8C8C9
%C2C8C2C8C1CFFD1BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%AF85A9A8FFA9AFA8AFA9FFA8AF85A9A8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFA8767DAFAFFFA8FFA9FFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA0C8A0C8A0C9A7C99FC89FC9A8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD18FFA9AF85FFFFFFA9FFAFAFFFFFA9
%AF85FD15FFA89A6F9ACAFFAFFD19FFC8C8C8C9C9CFC9C9C2C9FD31FFA8AF
%A9AFA8FFAFAFA9FFA9FFA8AFA9AFA8FD14FF9B6FBC93BCA8FFA8FD19FFC8
%C9A7CEFD04C9FD33FFA9AFA9AFAFFFA9FFA9AFFFFFA9AF85AFA9FD13FF93
%BCB6BCB6C3FD1AFFFD05C9CEC9C8C2CFFD1BFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFA8AF84AFA8FFA8AFA9FFA8FFA8AF84AFA8FFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFCABC93BC93BC93C3A8FFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFC9C29FC9C9C9A7C89FC29F
%CFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD1AFFA9AFA9
%FFAFFFA9FFAFAFFFFFA9AF85AFAFFD12FFCAB5BCB6BCBCBDC4FD17FFCAC8
%C2C8C2C9C8C8C2C8C2C8C2FD30FFA8AFA8AFA8FFAFFFA7AEA8FFA8AFA8AF
%A9FD12FFA84B9493BC93BCA1FD18FFC9C1C8A0C8C1C9A0C8C2C8A0C8C9FD
%30FFA9AF85FFFFFFA75151CFFFFFA9AF85AFFD12FF4B274BC3CACACAFD19
%FFCAC9C2C8C1C9FFFFC2C8C2C8C8FD1CFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFA8FFA8FFFFA7F827A7FFA8FFA8FFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFA827207DFFFFAFFFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8C89FC9A8FFFFFFA0C8C2FFAFFFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD1EFFAEA17DFD19
%FFA1CAFD21FFCFFD06FFCAFDFCFFFD20FFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FDFCFFFD89FFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FDFCFFFD85FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FDA3FFA9FD1DFFCFFD25FFA8FD3CFFAF
%FD1AFFCFA6A6A6CFFD24FFAFFD1CFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FD04FFCF81A5818181CFFD04FFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8AFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD22FFAFFD18FFCFA5ACA5AC
%81A5A7FD1EFFA8A8FFFFFFAFFD34FFAFFFA9A9A8FFAFFFA8AFA9FD15FFA8
%AC81A581A580A7A9FFA8FFA8FD17FFA8CFA87DA8FFAFFD37FF8B61AFFFFF
%FF8561AFFD17FFAC81A581A6A8FFA9FFAFFD18FFA751CFFD1FFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF8485A8FFA8FF
%858584FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFAFFFA8A58081
%5A8BAFFFAFFFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA97C
%808180CFAFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FD1CFFAFAFA9FD07FFAFFD17FFAFFFAEADA8A9A1CAC3CAFD17FFAD7B7B
%81AB81CFFD35FFAE855B85CFFFAFFFFFFFAFFFAFFD13FFA8FFA8FFA8FFFF
%FFC3BCB6BC93C3FD15FF7D50AB7B8180A6CFFD36FFA98BA9FD05FFAFFD17
%FFA9FD06FFCAB6BDBCBC93FD15FF818181AB81ACFD21FFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFAFFFA8FFA9A9A8FFA8FFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA9FFA8FFA8FFA8FFA1B693BC93
%B6A1FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FFAD80817AA6FFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD1DFF
%AF61AFFD1CFFAFFFAFFFAFC393BCB6BC93FD16FFAD81ADFD3BFFAFFFA985
%84FD1DFFA8FFA8FF9BB593BC93CAFD14FF76FD66FFCACACAFD15FF7DFD26
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFAFFFFFFFAFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FDFCFFFD89FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FDFCFFFD85FFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FDFC
%FFFD89FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFCFA6CFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFAFFFA8FFAFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FD0BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FD1EFFA7ABA5FD3CFFA877FD057DA8FD34FFAEADA8FFFFCF81ADFFFFA8
%ADA6FD15FFA8FD07FFAFFD18FFA827FD067D52A8FD33FFAC80A6FFFFAEA6
%A6CFFFCF80A5A7FD15FFA87D537D527D537DFD18FF7DA8FD06FF7DA8FD1B
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA5A580ADA6
%A581A581ADA68080CFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%AF527D527D527D7DFFCFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFA9FFFFFFA8FFA8FFA8FFFFFFA9FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FD1CFFADCE81ACA5A6A5AC81A6A7CFFD16FFAFFD07FFAFFD
%17FF7DA9FD06FFA2A8FD33FFA8FFAEA581A581A581A581FD17FFCAC8A0C9
%C8C9A0C9C2C9CAFD13FFA8FF7D524CFFFFFFA8FFA85227A8FD31FFCFA681
%ACA5ACA5ACA5A581A5AEFD16FFCFC2C8C2C8BCC8C2C8C8FD15FFAF7D7D7D
%7EFFAFFFAFA87D7D7DFD1CFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFCBCF81A6A6A581A581A5818180CFA7CFA9FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8C8C2C299B699C8A0C9CFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFA9FF7D524CAFAFC3A1FF7E524BA8A8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD1CFF81A5A5AC81A581ACA5A5
%A5FD15FFC8C8C2BCB6BCC2C9C8FD15FFAFFFA8FFAFCAB5BCA8FFA8AFAFFD
%34FFA8A680A57AA581A5A7CF81A6A8FD13FFA8C8C2C899BCC2C8C2C9FD14
%FFAFFFA8FFAFFF93BC93BCA8FFAFFFA8FD31FFCF81A5A6CF81A581A5A6FD
%18FFCFC1C8C8C8C2C8C8C8C2FD15FFAFFFA9FFAFCA94C3A8FFA9FFAFFD1A
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA6A580ADFF
%CF82CFA8A6A6FFCBFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8
%C9A7CAA7CAA7CAA7CAA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFA8AFA8FFA9CAA8FFA8AFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FD1BFFCFA5ACAEFFADADFFFFA6ACFD18FFAFFFAFFFAFFFAF
%FFAFFD17FFAFFFFFFFAFFFFFFFAFFD58FFA8FFAFFFA8FFAFFDBFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FDFCFFFD85FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FDFCFFFD89FFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FDFCFFFD85FF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2020-05-13T13:06:26+02:00</xap:CreateDate>
         <xap:ModifyDate>2020-05-13T13:06:26+02:00</xap:ModifyDate>
         <xap:MetadataDate>2020-05-13T13:06:26+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9SYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXE0xVbzXxw0i2wynpgTbeKuxV2KuxV2KuxV2KqQurY14yK1CVPE1oymhBp3B2OGkEhUB&#xA;BFQag98CW8VdirsVdiq2WWOKNpJGCIoqzHYDIykIizsExiSaHNZbXVvcx+pBIJErQkePvkcWWOQX&#xA;E2GWTHKBqQpq5vLW1UNcSLGrGg5d/lgy5oYxcjSceKUzURaqjo6B0YMjCqsNwQcsjIEWOTAgg0W8&#xA;KHYq7FXYq7FXYq7FXYq7FXYq7FVG4uBDQkbdSSaUphEbYylSiuoxyHilGqQDRgaVyRxkc2AyA8km&#xA;8x2ur3U1p+jrxIUhmjeeMqpKhSaysS6VUVHwd8ryY5mqdnoNTp4CYyCzwnr9nI1705W49KJHLCWv&#xA;ws42BIG57+GWcJ5OuMxzHJy6lE5ovFj4BgcJxkc2Iyg8kZlba7FXYq7FXYqxXWfNMV3ez+XtFuj+&#xA;kqSQ3V7b+nI1hLw5RtJFJ9sHoaV4mgNK7MSCabJ4ZxgJken8fjzX+V9Jms9PIuLa3ttQupGuNSFo&#xA;WML3DUV5VDUI5hAxHj4nfLHHO7IoF4jiOmQLKKrgZOxV2KuxVinnGa89WKEgi0YVqKgFt61I7jOf&#xA;7YnPiA/g/S7js2MaJ/iSvRL27tboPb/Er09SOho1a9z/AJjNfpNRPFO4/LvczU4ozjUlPWLy8ubg&#xA;zXBqpUPFx3TgewJ2pkdVmnknck6fHGMainvk2W9KyQsCbOMfAx6B9tl9iO2bXseczY/g/S4HacYb&#xA;H+L9DJs3rqXYq7FXYq7FXYq7FXYq7FXYq7FUDqgrERRWqp2k+yf9b2yzFzac3L9aW6fHxl/u7dN1&#xA;3g69e+wzIzGxzl8XHwRo8oj3Ip4/9IuT6VqeSEcmPxt02k+H7OREvSN5c/xTIx9R2jy+Px8nFaWE&#xA;a8IV3b4I/wC66N7Dbx2yMj6+v6WUR6OQ+HJB2MfGYn0rZPhO8H2uo67DbLc0rHOXxasMaPKPwZFm&#xA;E57sVdirsVY7+YOp3Wm+UNQubVmjnKrEkqkqyeq4jLKRQggNsR3yrNMxiSHY9laaObURhL6d/sFv&#xA;n/Rjd2Opw39rM41GIUN2T8TCtTz7N9I/XmvGSV7PeS0OKUamOL08PvH6x0PR9A+VPMNprlgskXwX&#xA;UYAuYT1VvEeKntmzx5RIPn/aHZ0tNOjvE8j+OrIFUAUyThBvFXYq7FXYql+uT2EVg/10ckb7CftF&#xA;v8nwp45h66eOOM8fJydJGZmOBjOmegYw0SkkEcmRhVSx7rt8NDyJzncFU7XPd7qOqXVuqiGVA8zl&#xA;JHBoGTiBWpBZeW3bI5pjkWeCB5jkzDSprKWyjNmAsKinDup7hvfOn0k8csY8P6XS6iMxM8fNGZkt&#xA;DsVdirsVdirsVdirsVdirsVdiqC1JSycQquSCOL/AGT7HY5ZjNFqyiwl9nbtFKCYIYald4ep37/C&#xA;uXZZ2Ocj7/7WjFCjyiPd/YxD80PzK/wVf6bDHpUV8dVWQSOz+mV4MgoaI/IHn+GYGTNl4jGJAEQD&#xA;vZ7/ADHc5UcUTZpnMiqbOIJGoDCojpRPiUmlB23y/FkMgJHmaa5RAFAIS0t2jkLG3ghqKcovtdRt&#xA;9ldsyckwRzkff/a0YsZB+mI939ifZiOa7FXYq7FXgX5xfmF5iufO48kaZaGW2geFZYIxylupZo0l&#xA;Wn8oQOKDxqT2pDLj4o07Ls3VDT5BOr/V5Mg0/wDJnWQYpLjUIISwHqoqtIVr1H7IJzEjpD3vQ5Pa&#xA;bHvwwJ+z9b0zQ9DsdGsUtLRdhvJIftO3iczIQERQeW1ernnmZS/sTHJOK7FXYq7FXYqxfzfp907p&#xA;eIS0KLxYCp49d6Dsa5oe19PMnjG8a+Tt+zs0QODqlmhaTc305YEx2y7SuQKH2A3BPz6Zg6HSSyy7&#xA;o9S5Wr1EcY75KOraPc6bckOzSRSNVJqVJ6Vqf15DV6SWGVHl0LPTaiOSO3PuTzyfYXUQku5OSQyr&#xA;xSNjUnevLNn2RgnG5n6T+LcDtLNE1EcwyXN46p2KuxV2KuxV2KuxV2KuxV2KuxVpkRvtKD8xXFaa&#xA;9KL+RfuGG0UEDqfl3y/qrxPqmmWl+8FfRa5gjmKVoTxLq3GtB0yNDmlHelHQDgKDoKCgwjbkinel&#xA;F/Iv3DDa0F2BLsVdirsVQo0vTBfHUBaQC/YUN36aesRTj/eU5fZ264p4jVXsisUOxV2KuxV2KuxV&#xA;2KtEAggioOxBxIVpI441CxqEUdFUUH4YIxAFDZJJO5dJHHIvGRA69eLAEfjglESFEWokRyXZJDsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVWs3QDck0HzwgIJaVyGKsKEde/XGkAr8DJ2KuxV&#xA;2KuxVa7pGjO7BUUVZjsAB3ORlIRFnYBWN3fne3hm4xWzSw1p6hbiTTuFof15z2X2jgJVGJlHvuvs&#xA;Up7p9/b39olzbkmN+x2II6g5vNNqYZoCceRVE5ersVdirsVdirsVdiqm8v2lXZ1GwPfDSCVsE/P4&#xA;W2cYkIjJWwMnYq7FXYq7FXYq7FXYq7FXYq7FXYqtZtjTCAglJNL1TULvUZ7e4g9OKOpVwCKEHYV7&#xA;19szM+CEYAg2S4ODPOczGQoBV1zUZ9Ot1khj9RnajM1SAPoyOlwjJKiaZarMccbAtMLGd57WKV0M&#xA;bSIGZD1UkdMx8keGRDk45GUQSiMg2OxV2KuxVAapaJfWrwMxQHcMD3HSo7jMbW6QZ8ZgTX4+1jbz&#xA;vUYpYblreRaNGafP3Hsc891GCeKZhIbhJNso8oO66XIqMf75uQHY8VzvOydBk02ADIKlL1V3Xt+h&#xA;ohmE74ehpkMEkwcBqlT45sSG2JKKyLN2KuxV2KuxVjPmjzimlk22nRx3+pRyR/WrX1Ahiicgktsa&#xA;MU3UHrms1/acNOQDzPy/H3c1X+XrdSbq4tb557C5f1YbSaryW8zktKokLFijE1CEfDvQ8SAM3Sau&#xA;GeAnA7fcxO6fxJ+0yhXGxPjl5SAqYEuxV2KuxV2KuxV2KuxV2KuxV2KuPTFUj1Cw1aXVYZoJuNsp&#xA;XmvIjYGrDj0NRmbiy4xjII9Tg5cWQ5AQfSmIubaSRoo5FeVDWSNSOVO+YxgQLI2ckTiTQO6qFDMa&#xA;LRD0U+PjkWSqAANsizbxV2KuxVoioIxVCO9X4NVVHWvfJtZU5bbTpmDTQxSMooC6KxA+kZXLDAyE&#xA;iAZDka3HuU0dni+s+Y7601jUYrPUJ4bdbqb04oZXRQA5AoqkAbDMHNqJmRuRPxfRNB2bgGCH7uFm&#xA;Mb9I50PJmn5U+a9R1f63Y6g5ne1CyQzsatwY0KserU7E5bpsplYLovaDs7HhMZwFcXMPRMynnHYq&#xA;7FXYql/mCa8h0W8ks3Md0IiIZQocox25hWBB49dxTxzF1uaWPFKcRZCvKItPknu7e8uWM+rBPTlu&#xA;Iwy+qW6hlq1Ry+IA1oemcBPPKZMRZEpXR3N/r+9FvSvK+gPpsLTTsfrMwHKMH4VHUD3b3zsOx+zT&#xA;p4mUj65dOg/aoCe5uUuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtMtcKCEps9AittSkvRIzGTlRDSg5&#xA;GpzKyaoygIVycTHpBHIZ3zTYCmYjmN4q7FXYq7FXYqtkQOpU98QghDfUm/mGS4mPA8z1D8m9Uur+&#xA;5uV1CBVnleQKVeoDsWp+OYEtKSSbexwe0kIY4x4D6QB8mZeSvJFp5YtpQspuby4p685HEUWtFRam&#xA;gFfpy/DhEA6XtPtSWqkNuGMeQZLlzq3Yq7FXYqkvPXb7XSoU2Oi2JIdmCtJeyMvRa8uEKcuv2mbw&#xA;UfEqjLfRNKt7j6zDbIk29HFdq9aCtB9GYePQYIT44xAktI7MxXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FVKS5tonVJZUR3+wrMAT22B65VPNCJAlIAnlZVVy1XYq7FXYq7FXYq7FWuS+I&#xA;+/FbdyXxGKt4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxqy82yS6strcR&#xA;xxW8hZVYkqykVI5EmhrSnbOc0vbkp5+CYEYm/h71QHmK70y+1CB0lkaNKJOUUUKAk/ASQa1NM1/a&#xA;up0+bNEgyIGxodPJaTXUvNVtHpouLJleVpBEUf7SVUtUr9HyzbavtmIwceLeRNb9Ph+AqM8v6nLq&#xA;NgZ5VAZXKVUEBqAGu/zzL7K1ktRi4pDe696pnmyV2KuxV2KqV0SsDuKkoOVBuTTegwhBeef8rdb/&#xA;AKk7zN/3Dv8Ar5kqRw+YTLy9+YTa1qsWn/4c1rTfVDH63qFn6FuvFS1Gfm1CaUG3XFeHzDNsgydi&#xA;rsVdirsVQeqSXv6OuxpwU6h6MgtPUNI/W4n0+Rofh5UrthpFsG0/8t75rGBtV8zeYn1JkVrxrfUj&#xA;HD6xFX9JBTigb7I8MLLjW6n+XWrRWMsuheZtfTV4xzsje6gZrYyKahZYzUMjdDsfkcV43oFrLM0E&#xA;RuVVLgovrKhqgenxBSdyK9MFMbV8CXYq7FXYq7FXYq7FXYq7FXYq7FWnbipahNATQdTTwwSNC1YT&#xA;qerxX1nK36PWF/VUNcgKwOxIBegYNnF63XjPhJGPhPEPVt9/O1SV9mDF6KOo8c0aVfy+0UmvWwkj&#xA;WVHYqVdQw3Ujv3GZ/ZVfmIggEHvYvRLaS0ePjatG0abUiKlR7fD0zvcM8ZFQIod37Eq2Wq7FXYq7&#xA;FUs8w3U1tpxkhPF+aitK7H55ha/PLFj4o87cnSYo5J8MuTCdV86zaZEJLiXkSQBGioX3rvQldts1&#xA;GLtDUzNAj5O8wdi48poD7SjLXzDe3CCSKdXjP7ShT9G2R/lPUA7n7A0z7MxRNEG/iz3OmdA7FXYq&#xA;7FXYqwH81NZvdO0OD0r2TTLafUIIL/UoP7yG2kY+oyni3A7AcsnTGPN35ceZr268jWuo6vceqA8y&#xA;rqFwREZIUnZIpHqFG6gb98BoblkISlLhiCT3Bb+ZPmK5tvKkV1Y3rWFrcXdrFc6pbEOYrWaULJKj&#xA;AMB8J+1iN14TGREhRHRV/KjWtT1XyvDLfXD3wW5uIrbUJRxee3ilYRSEUFSQKVxKJc2d5FLsVdir&#xA;sVdirsVdirsVdirsVdirsVYjrutfXppNGhtgBJMsIuHJADiQAtxA8ffOW7Q7RGaZ00Y85cNnvvuQ&#xA;kd35c1mG8SzCLKaNJH6ZFWUbVNTt9rvmozdlZ4ZOCuI8xXcqYaF5fs5Li5tNTPC8pwjt+4qoYSBh&#xA;8Jp2zO7O7NxmcseY1kqhH4XxdygMk0HQjpayhpvWaTiNl4gBa02qfHN72Z2Z+V4vVxcXw5JTbNqr&#xA;sVdirsVSrzNFLLphSJC7c1PFRU/hmv7TxyliqIs2HM0MxHJZNB57rnkybVQjmKSOdKAPwcjjuaU2&#xA;7nNNp8eaH8Eq9xek03asMW3FEj3hMtP0OSxtlt7e2kWNd6cWO569cjPBmkbMZfIuNl1sckuIyjfv&#xA;D0XOreYdirsVdirsVS64VWeRWAZSSCpFQRlgajzYl+YGh6tqWkqumzOqwqwlsYwaThmTiNiB8HEn&#xA;MfU45Sjs7rsPWYsOX94Bvyl/N5/er+SdG1LT9FWHU52n9VUKW0g/uV40Me5Iw6eEox3au2dVizZi&#xA;ccQKvf8AnebJ7VVWRFUAKNgBsAAMuLqo80wyDa7FXYq7FXYq7FXYq7FXYq7FXYq7FUH+iNN+t/W/&#xA;QH1ivLnU05ePGvGv0Zh/yfh8TxOH19/7OSqzWds10t2YwbhV4LJ3CnLjp4GYyEesCrVaLCzF4bwR&#xA;AXJHEy71IpTft0wflcfieJXr71RGXq7FXYq7FXYq06B14npipCl9Vj8T+H9MNseFwtY69SfbG14Q&#xA;rYGTsVdirsVdiq1o42NSoJ8cbRTXoxfyD7sNrQd6MX8g+7G1oNrHGpqqgHxwWtLsUuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:78419D530895EA11838997763DA4E51F</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:79419D530895EA11838997763DA4E51F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:77419D530895EA11838997763DA4E51F</stRef:instanceID>
            <stRef:documentID>uuid:76419D530895EA11838997763DA4E51F</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>900.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -900 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 900 li
1200 900 li
1200 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1200 900 mo
0 900 li
0 0 li
1200 0 li
1200 900 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.00784314 .00392157 .00392157 0 cmyk
f
940.67 261.712 mo
935.922 266.46 928.152 266.46 923.405 261.712 cv
841.4 179.708 li
836.652 174.96 836.652 167.19 841.4 162.443 cv
857.37 146.473 li
862.119 141.726 869.887 141.726 874.635 146.473 cv
956.64 228.478 li
961.387 233.226 961.387 240.995 956.64 245.743 cv
940.67 261.712 li
cp
0 .309804 .639216 0 cmyk
f
879.244 217.551 mo
900.678 238.984 li
933.912 205.751 li
912.477 184.316 li
879.244 217.551 li
cp
.0666667 .431373 .74902 0 cmyk
f
897.361 169.201 mo
864.127 202.435 li
879.244 217.551 li
912.477 184.316 li
897.361 169.201 li
cp
.00392157 .0941176 .356863 0 cmyk
f
956.64 162.443 mo
961.387 167.19 961.387 174.96 956.64 179.708 cv
874.635 261.712 li
869.887 266.46 862.117 266.46 857.369 261.712 cv
841.4 245.743 li
836.652 240.995 836.652 233.226 841.4 228.478 cv
923.405 146.473 li
928.152 141.726 935.922 141.726 940.67 146.473 cv
956.64 162.443 li
cp
0 .309804 .639216 0 cmyk
f
927.091 197.348 mo
928.354 198.609 928.41 200.599 927.219 201.791 cv
896.719 232.291 li
895.526 233.483 893.537 233.425 892.274 232.164 cv
870.949 210.838 li
869.688 209.576 869.63 207.586 870.821 206.395 cv
901.321 175.894 li
902.514 174.702 904.504 174.759 905.766 176.021 cv
927.091 197.348 li
cp
.00392157 .0941176 .356863 0 cmyk
f
905.233 184.199 mo
905.232 185.674 904.037 186.87 902.563 186.87 cv
901.088 186.87 899.893 185.674 899.893 184.199 cv
899.893 182.725 901.088 181.529 902.563 181.529 cv
904.037 181.529 905.232 182.725 905.233 184.199 cv
cp
.0666667 .431373 .74902 0 cmyk
f
916.373 204.571 mo
916.373 206.046 915.178 207.242 913.702 207.242 cv
912.228 207.241 911.031 206.046 911.031 204.571 cv
911.031 203.096 912.228 201.9 913.702 201.901 cv
915.178 201.901 916.373 203.096 916.373 204.571 cv
cp
f
915.686 192.211 mo
915.686 193.686 914.49 194.881 913.016 194.881 cv
911.541 194.881 910.346 193.686 910.346 192.211 cv
910.346 190.735 911.541 189.54 913.016 189.541 cv
914.49 189.541 915.686 190.735 915.686 192.211 cv
cp
f
892.949 195.95 mo
892.949 197.424 891.754 198.621 890.279 198.621 cv
888.805 198.62 887.608 197.424 887.609 195.95 cv
887.608 194.474 888.805 193.278 890.279 193.279 cv
891.754 193.279 892.949 194.474 892.949 195.95 cv
cp
f
883.717 209.759 mo
883.717 211.234 882.521 212.43 881.047 212.43 cv
879.572 212.43 878.377 211.234 878.377 209.759 cv
878.377 208.284 879.572 207.088 881.047 207.089 cv
882.521 207.089 883.717 208.284 883.717 209.759 cv
cp
f
903.936 201.138 mo
903.936 202.612 902.74 203.808 901.266 203.808 cv
899.791 203.807 898.596 202.612 898.596 201.138 cv
898.596 199.663 899.791 198.467 901.266 198.467 cv
902.74 198.467 903.936 199.663 903.936 201.138 cv
cp
f
905.538 213.041 mo
905.538 214.515 904.343 215.711 902.868 215.711 cv
901.394 215.71 900.197 214.515 900.197 213.041 cv
900.197 211.565 901.394 210.369 902.868 210.37 cv
904.343 210.37 905.538 211.565 905.538 213.041 cv
cp
f
898.062 226.545 mo
898.062 228.02 896.865 229.215 895.391 229.215 cv
893.916 229.215 892.721 228.02 892.721 226.545 cv
892.721 225.069 893.916 223.874 895.391 223.875 cv
896.865 223.875 898.062 225.069 898.062 226.545 cv
cp
f
894.475 214.642 mo
894.475 216.117 893.279 217.313 891.805 217.313 cv
890.33 217.313 889.135 216.117 889.135 214.642 cv
889.135 213.167 890.33 211.972 891.805 211.972 cv
893.279 211.972 894.475 213.167 894.475 214.642 cv
cp
f
916.066 179.379 mo
916.455 177.957 917.924 177.118 919.346 177.506 cv
920.769 177.894 921.607 179.361 921.221 180.784 cv
920.832 182.208 919.364 183.047 917.941 182.659 cv
916.518 182.27 915.68 180.803 916.066 179.379 cv
cp
f
912.541 168.584 mo
912.928 167.162 914.396 166.323 915.819 166.71 cv
917.241 167.099 918.081 168.566 917.693 169.99 cv
917.307 171.413 915.837 172.252 914.414 171.863 cv
912.992 171.475 912.152 170.008 912.541 168.584 cv
cp
f
927.805 190.456 mo
928.193 189.033 929.662 188.194 931.084 188.582 cv
932.506 188.971 933.346 190.438 932.958 191.861 cv
932.57 193.285 931.102 194.123 929.68 193.735 cv
928.258 193.347 927.418 191.879 927.805 190.456 cv
cp
f
932.871 183.063 mo
933.26 181.64 934.727 180.802 936.149 181.189 cv
937.572 181.578 938.412 183.046 938.023 184.469 cv
937.637 185.892 936.168 186.73 934.744 186.342 cv
933.322 185.954 932.483 184.487 932.871 183.063 cv
cp
f
945.518 174.191 mo
945.906 172.769 947.375 171.929 948.797 172.318 cv
950.22 172.706 951.06 174.174 950.672 175.597 cv
950.283 177.02 948.815 177.858 947.393 177.47 cv
945.969 177.083 945.131 175.615 945.518 174.191 cv
cp
f
930.35 173.947 mo
930.738 172.525 932.207 171.686 933.629 172.073 cv
935.051 172.461 935.891 173.93 935.502 175.353 cv
935.115 176.776 933.646 177.615 932.225 177.226 cv
930.801 176.838 929.963 175.371 930.35 173.947 cv
cp
f
924.305 160.517 mo
924.693 159.094 926.162 158.255 927.584 158.643 cv
929.006 159.031 929.846 160.499 929.458 161.921 cv
929.07 163.345 927.602 164.185 926.18 163.795 cv
924.757 163.407 923.918 161.94 924.305 160.517 cv
cp
f
935.986 152.201 mo
936.375 150.778 937.844 149.939 939.266 150.327 cv
940.688 150.716 941.527 152.183 941.14 153.606 cv
940.752 155.03 939.283 155.868 937.861 155.48 cv
936.438 155.093 935.6 153.625 935.986 152.201 cv
cp
f
936.315 164.627 mo
936.704 163.205 938.172 162.365 939.594 162.753 cv
941.018 163.143 941.857 164.609 941.469 166.032 cv
941.08 167.456 939.613 168.294 938.189 167.907 cv
936.768 167.519 935.928 166.051 936.315 164.627 cv
cp
f
879.958 241.569 mo
878.924 242.62 877.233 242.635 876.182 241.601 cv
875.131 240.567 875.115 238.876 876.148 237.825 cv
877.183 236.772 878.875 236.757 879.926 237.792 cv
880.977 238.827 880.992 240.516 879.958 241.569 cv
cp
f
874.504 252.507 mo
873.469 253.559 871.779 253.573 870.727 252.54 cv
869.676 251.505 869.66 249.814 870.694 248.763 cv
871.729 247.71 873.42 247.696 874.471 248.73 cv
875.523 249.765 875.537 251.455 874.504 252.507 cv
cp
f
875.131 226.168 mo
874.098 227.22 872.407 227.235 871.355 226.2 cv
870.304 225.167 870.289 223.476 871.322 222.424 cv
872.356 221.372 874.048 221.357 875.099 222.392 cv
876.15 223.425 876.166 225.115 875.131 226.168 cv
cp
f
864.047 225.056 mo
863.014 226.107 861.322 226.121 860.271 225.088 cv
859.219 224.053 859.204 222.363 860.238 221.311 cv
861.272 220.259 862.963 220.245 864.015 221.279 cv
865.066 222.312 865.081 224.003 864.047 225.056 cv
cp
f
852.871 233.672 mo
851.838 234.725 850.146 234.739 849.096 233.705 cv
848.045 232.671 848.029 230.98 849.063 229.929 cv
850.097 228.876 851.789 228.863 852.84 229.896 cv
853.891 230.93 853.905 232.621 852.871 233.672 cv
cp
f
864.842 239.328 mo
863.809 240.378 862.119 240.393 861.065 239.359 cv
860.015 238.325 860 236.634 861.033 235.583 cv
862.068 234.531 863.76 234.516 864.811 235.551 cv
865.861 236.584 865.877 238.274 864.842 239.328 cv
cp
f
864.568 256.44 mo
863.535 257.492 861.844 257.505 860.793 256.472 cv
859.742 255.438 859.727 253.748 860.76 252.696 cv
861.793 251.644 863.484 251.629 864.537 252.664 cv
865.588 253.697 865.602 255.388 864.568 256.44 cv
cp
f
886.672 235.872 mo
885.638 236.923 883.947 236.938 882.895 235.904 cv
881.844 234.87 881.828 233.179 882.863 232.127 cv
883.897 231.075 885.589 231.061 886.639 232.096 cv
887.691 233.129 887.707 234.82 886.672 235.872 cv
cp
f
855.082 244.542 mo
854.049 245.593 852.358 245.608 851.307 244.574 cv
850.255 243.54 850.24 241.849 851.273 240.798 cv
852.307 239.745 853.999 239.731 855.05 240.765 cv
856.102 241.799 856.117 243.49 855.082 244.542 cv
cp
f
924.085 221.19 mo
925.508 221.578 926.348 223.046 925.959 224.469 cv
925.57 225.892 924.104 226.731 922.681 226.344 cv
921.257 225.956 920.418 224.487 920.807 223.064 cv
921.194 221.642 922.662 220.802 924.085 221.19 cv
cp
f
934.881 217.664 mo
936.303 218.051 937.143 219.519 936.755 220.942 cv
936.366 222.365 934.898 223.204 933.476 222.816 cv
932.053 222.428 931.212 220.96 931.602 219.538 cv
931.989 218.114 933.457 217.275 934.881 217.664 cv
cp
f
913.008 232.929 mo
914.432 233.316 915.271 234.785 914.883 236.208 cv
914.494 237.629 913.026 238.469 911.604 238.081 cv
910.18 237.693 909.342 236.225 909.729 234.802 cv
910.117 233.379 911.585 232.541 913.008 232.929 cv
cp
f
920.401 237.994 mo
921.824 238.383 922.662 239.85 922.275 241.272 cv
921.887 242.695 920.419 243.535 918.996 243.146 cv
917.572 242.759 916.734 241.291 917.122 239.868 cv
917.51 238.445 918.979 237.606 920.401 237.994 cv
cp
f
929.273 250.641 mo
930.695 251.029 931.535 252.498 931.146 253.92 cv
930.758 255.342 929.291 256.182 927.867 255.794 cv
926.445 255.406 925.605 253.938 925.994 252.515 cv
926.382 251.092 927.85 250.253 929.273 250.641 cv
cp
f
931.447 234.58 mo
932.869 234.968 933.709 236.436 933.32 237.859 cv
932.933 239.282 931.465 240.121 930.042 239.733 cv
928.619 239.345 927.779 237.877 928.168 236.455 cv
928.556 235.031 930.023 234.192 931.447 234.58 cv
cp
f
942.948 229.428 mo
944.37 229.816 945.21 231.285 944.821 232.707 cv
944.434 234.129 942.966 234.969 941.543 234.581 cv
940.12 234.193 939.28 232.725 939.67 231.302 cv
940.057 229.879 941.524 229.041 942.948 229.428 cv
cp
f
951.59 233.97 mo
953.012 234.358 953.851 235.827 953.463 237.249 cv
953.074 238.671 951.607 239.511 950.184 239.123 cv
948.761 238.735 947.922 237.266 948.311 235.844 cv
948.697 234.421 950.166 233.582 951.59 233.97 cv
cp
f
941.889 247.747 mo
943.312 248.134 944.15 249.602 943.763 251.024 cv
943.375 252.447 941.906 253.286 940.484 252.898 cv
939.061 252.511 938.223 251.042 938.609 249.62 cv
938.998 248.198 940.466 247.357 941.889 247.747 cv
cp
f
861.697 184.161 mo
860.646 183.128 860.631 181.437 861.666 180.386 cv
862.699 179.333 864.391 179.319 865.442 180.353 cv
866.494 181.386 866.51 183.078 865.475 184.129 cv
864.44 185.181 862.75 185.195 861.697 184.161 cv
cp
f
847.9 179.545 mo
846.849 178.511 846.834 176.821 847.869 175.769 cv
848.902 174.718 850.592 174.702 851.645 175.736 cv
852.697 176.77 852.711 178.461 851.678 179.513 cv
850.643 180.564 848.953 180.579 847.9 179.545 cv
cp
f
876.792 182.19 mo
875.74 181.156 875.726 179.465 876.76 178.414 cv
877.793 177.363 879.484 177.347 880.535 178.381 cv
881.588 179.416 881.603 181.106 880.568 182.158 cv
879.533 183.209 877.844 183.224 876.792 182.19 cv
cp
f
878.211 168.251 mo
877.16 167.216 877.146 165.526 878.18 164.475 cv
879.213 163.423 880.904 163.408 881.955 164.442 cv
883.008 165.476 883.021 167.167 881.988 168.219 cv
880.955 169.27 879.264 169.285 878.211 168.251 cv
cp
f
869.594 157.075 mo
868.542 156.042 868.527 154.351 869.563 153.299 cv
870.596 152.248 872.287 152.233 873.338 153.268 cv
874.391 154.3 874.404 155.992 873.37 157.043 cv
872.336 158.095 870.646 158.109 869.594 157.075 cv
cp
f
863.939 171.08 mo
862.889 170.047 862.873 168.356 863.908 167.304 cv
864.941 166.253 866.633 166.238 867.684 167.271 cv
868.735 168.306 868.751 169.997 867.717 171.048 cv
866.682 172.1 864.992 172.114 863.939 171.08 cv
cp
f
851.358 171.61 mo
850.308 170.577 850.293 168.886 851.326 167.834 cv
852.359 166.783 854.053 166.768 855.104 167.802 cv
856.155 168.836 856.17 170.527 855.136 171.578 cv
854.102 172.63 852.412 172.644 851.358 171.61 cv
cp
f
867.395 190.876 mo
866.344 189.841 866.329 188.15 867.363 187.099 cv
868.397 186.048 870.088 186.033 871.139 187.067 cv
872.191 188.101 872.205 189.793 871.172 190.843 cv
870.139 191.896 868.447 191.91 867.395 190.876 cv
cp
f
858.277 157.571 mo
857.225 156.538 857.211 154.847 858.244 153.795 cv
859.279 152.744 860.969 152.73 862.021 153.763 cv
863.074 154.796 863.087 156.488 862.053 157.539 cv
861.02 158.59 859.329 158.605 858.277 157.571 cv
cp
f
835.506 517.551 mo
834.809 518.248 833.678 518.248 832.98 517.551 cv
832.283 516.854 832.283 515.724 832.98 515.026 cv
858.475 489.532 li
859.172 488.837 860.302 488.837 860.998 489.534 cv
861.695 490.229 861.695 491.36 860.998 492.058 cv
835.506 517.551 li
cp
.635294 .690196 .533333 .447059 cmyk
f
866.262 499.18 mo
863.432 502.009 858.803 502.009 855.974 499.181 cv
851.351 494.557 li
848.521 491.729 848.521 487.101 851.351 484.271 cv
908.16 427.461 li
910.99 424.632 915.618 424.632 918.447 427.461 cv
923.07 432.084 li
925.899 434.913 925.899 439.543 923.07 442.371 cv
866.262 499.18 li
cp
.0392157 .00784314 .0117647 0 cmyk
f
935.309 426.767 mo
923.766 415.224 li
940.359 398.629 li
951.902 410.173 li
935.309 426.767 li
cp
f
914.747 406.445 mo
854.865 466.327 li
850.896 470.295 850.896 476.788 854.865 480.756 cv
869.775 495.667 li
873.743 499.635 880.236 499.635 884.203 495.667 cv
944.086 435.784 li
914.747 406.445 li
cp
f
893.766 427.428 mo
854.865 466.327 li
850.896 470.295 850.896 476.788 854.865 480.756 cv
869.775 495.667 li
873.743 499.635 880.236 499.635 884.203 495.667 cv
923.104 456.768 li
893.766 427.428 li
cp
.356863 .0117647 .941176 0 cmyk
f
867.493 466.688 mo
860.998 460.193 li
858.474 462.718 li
864.969 469.213 li
865.665 469.91 866.795 469.91 867.492 469.213 cv
868.189 468.516 868.189 467.385 867.493 466.688 cv
cp
889.317 458.571 mo
875.969 445.223 li
873.443 447.747 li
886.793 461.097 li
887.489 461.794 888.619 461.794 889.316 461.097 cv
890.014 460.399 890.014 459.269 889.317 458.571 cv
cp
919.257 431.156 mo
919.954 430.459 919.954 429.328 919.258 428.631 cv
905.908 415.282 li
903.385 417.807 li
916.733 431.156 li
917.43 431.854 918.561 431.854 919.257 431.156 cv
cp
897.433 439.271 mo
898.131 438.575 898.131 437.443 897.434 436.747 cv
890.938 430.252 li
888.414 432.777 li
894.908 439.271 li
895.605 439.97 896.736 439.97 897.433 439.271 cv
cp
.635294 .690196 .533333 .447059 cmyk
f
963.266 419.012 mo
960.178 422.1 955.172 422.1 952.084 419.012 cv
931.521 398.45 li
928.435 395.36 928.434 390.355 931.521 387.268 cv
934.609 384.18 939.617 384.18 942.704 387.268 cv
963.266 407.828 li
966.354 410.918 966.354 415.924 963.266 419.012 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
951.062 441.797 mo
949.799 443.06 947.753 443.06 946.49 441.797 cv
908.734 404.04 li
907.473 402.778 907.473 400.732 908.734 399.471 cv
909.997 398.208 912.042 398.208 913.305 399.471 cv
951.062 437.227 li
952.322 438.489 952.322 440.535 951.062 441.797 cv
cp
f
966.087 744.706 mo
966.087 750.431 961.403 755.114 955.679 755.114 cv
842.36 755.114 li
836.637 755.114 831.952 750.431 831.952 744.706 cv
831.952 672.941 li
831.952 667.217 836.637 662.533 842.36 662.533 cv
955.679 662.533 li
961.403 662.533 966.087 667.217 966.087 672.941 cv
966.087 744.706 li
cp
f
966.087 688.526 mo
966.087 694.25 961.403 698.934 955.679 698.934 cv
842.36 698.934 li
836.637 698.934 831.952 694.25 831.952 688.526 cv
831.952 675.934 li
831.952 670.209 836.637 665.525 842.36 665.525 cv
955.679 665.525 li
961.403 665.525 966.087 670.209 966.087 675.934 cv
966.087 688.526 li
cp
.215686 .0941176 .113725 0 cmyk
f
932.099 670.012 mo
865.944 670.012 li
863.742 670.021 861.616 669.278 860.07 667.826 cv
858.516 666.387 857.655 664.279 857.67 662.149 cv
857.67 661.213 857.822 660.269 858.114 659.348 cv
860.599 651.425 li
862.336 646.367 867.064 642.894 872.41 642.752 cv
925.63 642.752 li
930.974 642.894 935.705 646.367 937.441 651.425 cv
934.268 652.422 li
931.096 653.416 li
930.646 651.494 927.6 649.259 925.63 649.401 cv
872.41 649.399 li
870.439 649.259 867.395 651.494 866.942 653.416 cv
864.455 661.343 li
864.352 661.673 864.317 661.942 864.317 662.149 cv
864.335 662.635 864.447 662.796 864.614 662.971 cv
864.793 663.134 865.146 663.354 865.944 663.361 cv
932.099 663.361 li
932.895 663.354 933.247 663.134 933.424 662.971 cv
933.593 662.8 933.707 662.637 933.72 662.149 cv
933.72 661.939 933.686 661.666 933.584 661.34 cv
931.096 653.416 li
934.268 652.422 li
937.441 651.425 li
939.929 659.352 li
940.214 660.272 940.368 661.213 940.371 662.149 cv
940.385 664.279 939.522 666.387 937.966 667.826 cv
936.43 669.271 934.322 670.012 932.136 670.012 cv
932.099 670.012 li
cp
.635294 .690196 .533333 .447059 cmyk
f
966.087 685.533 mo
966.087 691.258 961.403 695.941 955.679 695.941 cv
842.36 695.941 li
836.637 695.941 831.952 691.258 831.952 685.533 cv
831.952 672.941 li
831.952 667.217 836.637 662.533 842.36 662.533 cv
955.679 662.533 li
961.403 662.533 966.087 667.217 966.087 672.941 cv
966.087 685.533 li
cp
.0392157 .00784314 .0117647 0 cmyk
f
856.553 691.951 mo
856.553 703.088 li
856.556 704.895 858.071 706.409 859.878 706.411 cv
862.204 706.411 li
864.011 706.409 865.525 704.895 865.528 703.088 cv
865.528 691.951 li
865.525 690.145 864.011 688.629 862.204 688.627 cv
859.878 688.627 li
858.071 688.629 856.556 690.145 856.553 691.951 cv
cp
859.878 713.059 mo
854.37 713.048 849.915 708.597 849.904 703.088 cv
849.904 691.951 li
849.915 686.443 854.37 681.993 859.878 681.981 cv
862.204 681.981 li
867.711 681.993 872.163 686.443 872.177 691.951 cv
872.177 703.088 li
872.163 708.597 867.711 713.048 862.204 713.059 cv
859.878 713.059 li
cp
.635294 .690196 .533333 .447059 cmyk
f
932.513 691.951 mo
932.513 703.088 li
932.515 704.895 934.03 706.409 935.836 706.411 cv
938.165 706.411 li
939.97 706.409 941.485 704.895 941.487 703.088 cv
941.487 691.951 li
941.485 690.145 939.97 688.629 938.165 688.627 cv
935.836 688.627 li
934.03 688.629 932.515 690.145 932.513 691.951 cv
cp
935.836 713.059 mo
930.327 713.048 925.877 708.597 925.865 703.088 cv
925.865 691.951 li
925.877 686.443 930.327 681.993 935.836 681.981 cv
938.165 681.981 li
943.671 681.993 948.125 686.443 948.136 691.951 cv
948.136 703.088 li
948.125 708.597 943.671 713.048 938.165 713.059 cv
935.836 713.059 li
cp
f
915.725 719.141 mo
905.418 719.141 li
905.418 708.835 li
892.62 708.835 li
892.62 719.141 li
882.314 719.141 li
882.314 731.938 li
892.62 731.938 li
892.62 742.244 li
905.418 742.244 li
905.418 731.938 li
915.725 731.938 li
915.725 719.141 li
cp
0 .839216 .6 0 cmyk
f
534.857 248.805 mo
530.604 253.057 530.496 259.905 534.615 264.023 cv
538.734 268.144 545.582 268.034 549.834 263.782 cv
561.546 252.07 li
564.594 248.993 564.28 249.185 568.379 246.615 cv
572.91 243.776 578.059 244.969 578.059 244.969 cv
578.332 245.007 li
587.23 247.063 596.969 244.67 603.866 237.772 cv
649.525 192.115 li
660.154 181.485 660.154 164.09 649.525 153.461 cv
645.176 149.114 li
634.547 138.483 617.153 138.483 606.523 149.114 cv
560.865 194.771 li
553.98 201.657 551.585 211.375 553.619 220.258 cv
553.664 220.575 li
553.664 220.575 554.857 225.724 552.019 230.253 cv
549.612 234.093 548.978 234.728 546.379 237.295 cv
534.857 248.805 li
cp
.0941176 .0156863 .027451 0 cmyk
f
577.293 178.343 mo
560.865 194.771 li
553.98 201.657 551.585 211.375 553.619 220.258 cv
553.664 220.575 li
553.664 220.575 554.857 225.724 552.019 230.253 cv
550.135 233.26 549.334 234.305 547.828 235.848 cv
547.629 236.051 547.416 236.266 547.188 236.495 cv
547.037 236.644 li
546.832 236.85 546.617 237.062 546.379 237.295 cv
534.857 248.805 li
530.604 253.057 530.496 259.905 534.615 264.023 cv
538.734 268.144 545.582 268.034 549.834 263.782 cv
561.546 252.07 li
561.955 251.657 562.291 251.317 562.597 251.006 cv
564.584 248.997 564.824 248.844 568.379 246.615 cv
572.91 243.776 578.059 244.969 578.059 244.969 cv
578.332 245.007 li
587.23 247.063 596.969 244.67 603.866 237.772 cv
620.293 221.345 li
577.293 178.343 li
cp
0 .839216 .6 0 cmyk
f
588.414 179.996 mo
589.268 180.849 590.652 180.849 591.506 179.995 cv
592.359 179.141 592.359 177.757 591.506 176.902 cv
585.121 170.517 li
582.029 173.608 li
588.414 179.996 li
cp
581.893 196.02 mo
582.745 196.874 584.13 196.873 584.984 196.02 cv
585.838 195.166 585.838 193.782 584.984 192.928 cv
573.848 181.791 li
570.754 184.883 li
581.893 196.02 li
cp
604.438 173.473 mo
605.293 174.327 606.678 174.327 607.531 173.473 cv
608.386 172.619 608.386 171.235 607.531 170.38 cv
596.394 159.244 li
593.301 162.336 li
604.438 173.473 li
cp
606.523 149.114 mo
604.575 151.062 li
610.961 157.448 li
611.815 158.301 613.199 158.301 614.053 157.448 cv
614.907 156.593 614.907 155.209 614.053 154.355 cv
607.727 148.028 li
607.323 148.387 606.91 148.728 606.523 149.114 cv
cp
559.533 196.209 mo
565.866 202.543 li
566.721 203.397 568.105 203.396 568.959 202.542 cv
569.813 201.688 569.813 200.305 568.959 199.451 cv
562.573 193.065 li
560.865 194.771 li
560.399 195.238 559.959 195.719 559.533 196.209 cv
cp
.635294 .690196 .533333 .447059 cmyk
f
547.828 235.848 mo
547.412 236.276 546.943 236.739 546.379 237.295 cv
534.857 248.805 li
530.604 253.057 530.496 259.905 534.615 264.023 cv
538.734 268.144 545.582 268.034 549.834 263.782 cv
561.546 252.07 li
562.041 251.572 562.441 251.164 562.791 250.811 cv
547.828 235.848 li
cp
f
602.732 203.783 mo
591.467 215.048 li
586.174 220.341 586.174 228.925 591.467 234.219 cv
597.219 239.972 li
597.813 240.565 598.453 241.083 599.121 241.542 cv
600.805 240.484 602.402 239.236 603.866 237.772 cv
620.293 221.345 li
602.732 203.783 li
cp
0 .764706 .415686 0 cmyk
f
651.205 155.31 mo
602.732 203.783 li
620.293 221.345 li
603.866 237.772 li
649.525 192.115 li
659.56 182.08 660.115 166.019 651.205 155.31 cv
cp
.0392157 .00784314 .0117647 0 cmyk
f
667.692 440.557 mo
669.816 455.122 659.318 468.825 644.359 471.008 cv
591.225 478.761 li
576.268 480.943 562.289 470.813 560.164 456.246 cv
558.039 441.681 568.539 427.979 583.496 425.797 cv
636.631 418.043 li
651.59 415.86 665.567 425.992 667.692 440.557 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
583.496 425.797 mo
568.539 427.979 558.039 441.681 560.164 456.246 cv
562.289 470.813 576.268 480.943 591.225 478.761 cv
617.791 474.885 li
610.063 421.919 li
583.496 425.797 li
cp
.501961 .0941176 0 0 cmyk
f
578.811 477.768 mo
582.695 478.992 586.919 479.39 591.225 478.761 cv
617.791 474.885 li
614.151 449.933 li
602.406 451.646 li
588.941 453.611 579.097 464.909 578.811 477.768 cv
cp
.443137 .0392157 0 0 cmyk
f
655.54 443.893 mo
614.151 449.933 li
617.791 474.885 li
644.359 471.008 li
657.822 469.044 667.67 457.744 667.954 444.886 cv
664.07 443.662 659.848 443.265 655.54 443.893 cv
cp
.0392157 .00784314 .0117647 0 cmyk
f
528.785 479.05 mo
518.377 468.642 518.606 451.38 529.295 440.691 cv
567.266 402.721 li
577.954 392.032 595.217 391.802 605.624 402.21 cv
616.032 412.618 615.803 429.88 605.113 440.568 cv
567.145 478.539 li
556.455 489.229 539.193 489.457 528.785 479.05 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
605.113 440.568 mo
615.803 429.88 616.032 412.618 605.624 402.21 cv
595.217 391.802 577.954 392.032 567.266 402.721 cv
548.279 421.706 li
586.129 459.554 li
605.113 440.568 li
cp
.356863 .0117647 .941176 0 cmyk
f
577.813 396.1 mo
573.966 397.438 570.344 399.644 567.266 402.721 cv
548.279 421.706 li
566.111 439.536 li
574.504 431.143 li
584.126 421.522 585.268 406.579 577.813 396.1 cv
cp
.278431 0 .854902 0 cmyk
f
536.535 469.113 mo
566.111 439.536 li
548.279 421.706 li
529.295 440.691 li
519.675 450.313 518.532 465.256 525.988 475.735 cv
529.835 474.396 533.457 472.19 536.535 469.113 cv
cp
.0392157 .00784314 .0117647 0 cmyk
f
549.859 481.711 mo
549.859 466.992 562.229 454.948 577.344 454.948 cv
631.044 454.948 li
646.16 454.948 658.527 466.99 658.527 481.711 cv
658.527 496.43 646.16 508.473 631.044 508.473 cv
577.346 508.474 li
562.229 508.474 549.861 496.43 549.859 481.711 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
631.044 508.473 mo
646.16 508.473 658.527 496.43 658.527 481.711 cv
658.527 466.99 646.16 454.948 631.044 454.948 cv
604.194 454.948 li
604.194 508.474 li
631.044 508.473 li
cp
0 .839216 .6 0 cmyk
f
643.184 457.724 mo
639.517 455.95 635.396 454.948 631.044 454.948 cv
604.194 454.948 li
604.194 480.163 li
616.064 480.163 li
629.67 480.163 641.045 470.405 643.184 457.724 cv
cp
0 .764706 .415686 0 cmyk
f
562.367 480.165 mo
604.194 480.163 li
604.194 454.948 li
577.344 454.948 li
563.74 454.948 552.365 464.707 550.227 477.39 cv
553.895 479.162 558.016 480.165 562.367 480.165 cv
cp
.0392157 .00784314 .0117647 0 cmyk
f
626.694 685.541 mo
562.398 685.541 li
562.398 657.296 li
626.694 657.296 li
626.694 685.541 li
cp
.635294 .690196 .533333 .447059 cmyk
f
637.191 751.149 mo
637.191 757.692 631.845 763.047 625.302 763.047 cv
563.787 763.047 li
557.253 763.047 551.898 757.692 551.898 751.149 cv
551.898 682.209 li
551.898 675.666 557.253 670.32 563.787 670.32 cv
625.302 670.32 li
631.845 670.32 637.191 675.666 637.191 682.209 cv
637.191 751.149 li
.0941176 .0156863 .027451 0 cmyk
f
637.193 654.539 mo
637.193 658.004 634.359 660.84 630.895 660.84 cv
558.197 660.84 li
554.733 660.84 551.899 658.004 551.899 654.539 cv
551.899 641.122 li
551.899 637.658 554.733 634.822 558.197 634.822 cv
630.895 634.822 li
634.359 634.822 637.193 637.658 637.193 641.122 cv
637.193 654.539 li
cp
f
551.898 745.2 mo
637.191 745.2 li
637.191 685.926 li
551.898 685.926 li
551.898 745.2 li
0 .309804 .639216 0 cmyk
f
611.253 709.245 mo
600.948 709.245 li
600.948 698.94 li
588.15 698.94 li
588.15 709.245 li
577.845 709.245 li
577.845 722.043 li
588.15 722.043 li
588.15 732.348 li
600.948 732.348 li
600.948 722.043 li
611.253 722.043 li
611.253 709.245 li
0 .839216 .6 0 cmyk
f
625.302 763.047 mo
563.787 763.047 li
557.253 763.047 551.898 757.692 551.898 751.149 cv
551.898 745.2 li
637.191 745.2 li
637.191 751.149 li
637.191 757.692 631.845 763.047 625.302 763.047 cv
637.191 685.926 mo
635.579 685.926 li
636.119 685.141 636.657 684.346 637.191 683.541 cv
637.191 685.926 li
.0784314 .0117647 .0235294 0 cmyk
f
637.191 745.2 mo
637.191 745.2 li
551.898 745.2 li
551.898 743.733 li
563.091 741.41 575.528 737.283 588.15 730.225 cv
588.15 732.348 li
600.948 732.348 li
600.948 722.043 li
611.253 722.043 li
611.253 713.741 li
619.685 706.248 627.903 697.093 635.579 685.926 cv
637.191 685.926 li
637.191 745.2 li
0 .27451 .564706 0 cmyk
f
600.948 732.348 mo
588.15 732.348 li
588.15 730.225 li
595.863 725.911 603.645 720.502 611.253 713.741 cv
611.253 722.043 li
600.948 722.043 li
600.948 732.348 li
0 .772549 .494118 0 cmyk
f
630.895 634.822 mo
558.197 634.822 li
557.957 634.822 557.721 634.839 557.486 634.866 cv
557.486 646.413 li
557.486 649.878 560.32 652.714 563.784 652.714 cv
636.48 652.714 li
636.723 652.714 636.959 652.697 637.193 652.67 cv
637.193 641.122 li
637.193 637.658 634.359 634.822 630.895 634.822 cv
cp
.0392157 .00784314 .0117647 0 cmyk
f
271.725 266.547 mo
205.398 266.547 li
205.398 169.717 li
271.725 169.717 li
271.725 266.547 li
cp
.0941176 .0156863 .027451 0 cmyk
f
308.42 266.547 mo
374.747 266.547 li
374.747 169.717 li
308.42 169.717 li
308.42 266.547 li
cp
f
308.42 169.717 mo
308.42 266.547 li
327.469 266.547 li
327.469 169.717 li
308.42 169.717 li
cp
253.017 266.547 mo
271.725 266.547 li
271.725 169.717 li
253.017 169.717 li
253.017 266.547 li
cp
.145098 .0392157 .054902 0 cmyk
f
245.472 191.491 mo
219.522 191.491 li
219.522 186.185 li
245.472 186.185 li
245.472 191.491 li
cp
.443137 .0392157 0 0 cmyk
f
245.472 210.172 mo
219.522 210.172 li
219.522 204.866 li
245.472 204.866 li
245.472 210.172 li
cp
f
245.472 228.633 mo
219.522 228.633 li
219.522 223.327 li
245.472 223.327 li
245.472 228.633 li
cp
f
245.472 248.198 mo
219.522 248.198 li
219.522 242.893 li
245.472 242.893 li
245.472 248.198 li
cp
f
334.673 191.491 mo
360.623 191.491 li
360.623 186.185 li
334.673 186.185 li
334.673 191.491 li
cp
f
334.673 210.172 mo
360.623 210.172 li
360.623 204.866 li
334.673 204.866 li
334.673 210.172 li
cp
f
334.673 228.633 mo
360.623 228.633 li
360.623 223.327 li
334.673 223.327 li
334.673 228.633 li
cp
f
334.673 248.198 mo
360.623 248.198 li
360.623 242.893 li
334.673 242.893 li
334.673 248.198 li
cp
f
323.406 266.547 mo
257.08 266.547 li
257.08 141.639 li
323.406 141.639 li
323.406 266.547 li
cp
.0392157 .00784314 .0117647 0 cmyk
f
302.314 162.682 mo
293.121 162.682 li
293.121 153.438 li
287.317 153.438 li
287.317 162.682 li
278.024 162.682 li
278.024 168.485 li
287.317 168.485 li
287.317 177.729 li
293.121 177.729 li
293.121 168.485 li
302.314 168.485 li
302.314 162.682 li
cp
0 .764706 .415686 0 cmyk
f
285.587 191.491 mo
271.244 191.491 li
271.244 186.185 li
285.587 186.185 li
285.587 191.491 li
cp
.443137 .0392157 0 0 cmyk
f
309.049 191.491 mo
294.707 191.491 li
294.707 186.185 li
309.049 186.185 li
309.049 191.491 li
cp
f
285.561 209.978 mo
271.219 209.978 li
271.219 204.672 li
285.561 204.672 li
285.561 209.978 li
cp
f
309.024 209.978 mo
294.681 209.978 li
294.681 204.672 li
309.024 204.672 li
309.024 209.978 li
cp
f
285.537 228.466 mo
271.194 228.466 li
271.194 223.16 li
285.537 223.16 li
285.537 228.466 li
cp
f
308.998 228.466 mo
294.657 228.466 li
294.657 223.16 li
308.998 223.16 li
308.998 228.466 li
cp
f
278.484 240.821 mo
278.484 266.547 li
301.904 266.547 li
301.904 240.821 li
278.484 240.821 li
cp
.278431 0 .854902 0 cmyk
f
282.081 266.547 mo
298.307 266.547 li
298.307 244.773 li
282.081 244.773 li
282.081 266.547 li
cp
.635294 .690196 .533333 .447059 cmyk
f
359.645 430.293 mo
364.265 434.914 364.264 442.473 359.645 447.098 cv
285.658 521.086 li
281.036 525.705 273.476 525.705 268.853 521.086 cv
220.502 472.732 li
215.879 468.113 215.881 460.551 220.501 455.93 cv
294.489 381.942 li
299.109 377.321 306.668 377.321 311.291 381.942 cv
359.645 430.293 li
cp
.0392157 .00784314 .0117647 0 cmyk
f
314.885 385.537 mo
314.885 491.857 li
318.212 488.529 li
318.213 388.864 li
314.885 385.537 li
cp
322.478 393.128 mo
322.478 484.264 li
325.806 480.938 li
325.806 396.457 li
322.478 393.128 li
cp
307.293 379.318 mo
307.293 499.451 li
310.621 496.123 li
310.62 381.336 li
309.606 380.466 308.484 379.79 307.293 379.318 cv
cp
299.7 378.915 mo
299.7 507.043 li
303.029 503.715 li
303.028 378.483 li
301.907 378.469 300.787 378.615 299.7 378.915 cv
cp
330.07 400.72 mo
330.071 476.672 li
333.399 473.344 li
333.398 404.048 li
330.07 400.72 li
cp
294.489 381.942 mo
292.108 384.322 li
292.108 514.637 li
295.436 511.309 li
295.436 381.094 li
295.108 381.358 294.792 381.638 294.489 381.942 cv
cp
356.176 450.564 mo
356.177 426.826 li
352.85 423.499 li
352.849 453.893 li
356.176 450.564 li
cp
337.664 408.314 mo
337.664 469.078 li
340.99 465.75 li
340.99 411.641 li
337.664 408.314 li
cp
345.256 415.906 mo
345.256 461.486 li
348.583 458.158 li
348.584 419.233 li
345.256 415.906 li
cp
246.552 429.878 mo
246.551 498.783 li
249.879 502.111 li
249.879 426.551 li
246.552 429.878 li
cp
223.773 452.656 mo
223.773 476.004 li
227.101 479.332 li
227.101 449.33 li
223.773 452.656 li
cp
276.922 399.508 mo
276.922 524.533 li
278.041 524.564 279.16 524.439 280.25 524.158 cv
280.249 396.18 li
276.922 399.508 li
cp
284.515 391.916 mo
284.515 522.076 li
284.91 521.771 285.295 521.449 285.658 521.086 cv
287.842 518.9 li
287.842 388.588 li
284.515 391.916 li
cp
219.507 471.586 mo
219.508 457.074 li
216.227 461.328 216.225 467.334 219.507 471.586 cv
cp
231.365 445.064 mo
231.366 483.596 li
234.693 486.924 li
234.694 441.737 li
231.365 445.064 li
cp
269.33 407.101 mo
269.329 521.516 li
270.337 522.42 271.461 523.129 272.657 523.627 cv
272.657 403.773 li
269.33 407.101 li
cp
261.737 414.694 mo
261.736 513.969 li
265.064 517.297 li
265.064 411.366 li
261.737 414.694 li
cp
254.144 422.287 mo
254.145 506.375 li
257.471 509.703 li
257.472 418.958 li
254.144 422.287 li
cp
238.959 437.471 mo
238.959 491.189 li
242.287 494.518 li
242.287 434.144 li
238.959 437.471 li
cp
360.441 431.176 mo
360.441 446.215 li
363.997 441.861 363.998 435.526 360.441 431.176 cv
cp
.0235294 0 .00392157 0 cmyk
f
275.573 422.288 mo
267.371 422.288 260.721 428.936 260.721 437.138 cv
260.721 445.34 267.372 451.988 275.574 451.988 cv
283.776 451.99 290.424 445.34 290.423 437.138 cv
290.423 428.936 283.775 422.288 275.573 422.288 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
275.573 427.407 mo
270.198 427.407 265.838 431.763 265.84 437.138 cv
265.841 442.514 270.198 446.871 275.573 446.871 cv
280.946 446.871 285.304 442.513 285.303 437.137 cv
285.304 431.764 280.946 427.407 275.573 427.407 cv
cp
.501961 .0941176 0 0 cmyk
f
275.466 428.113 mo
270.539 428.113 266.545 432.105 266.547 437.031 cv
266.547 439.162 267.298 441.117 268.544 442.651 cv
269.818 443.637 271.519 444.134 273.451 443.934 cv
277.915 443.474 281.907 439.481 282.367 435.016 cv
282.566 433.084 282.069 431.383 281.083 430.109 cv
279.549 428.863 277.596 428.113 275.466 428.113 cv
cp
.443137 .0392157 0 0 cmyk
f
303.092 394.769 mo
294.89 394.769 288.24 401.417 288.24 409.62 cv
288.24 417.822 294.891 424.47 303.093 424.47 cv
311.295 424.47 317.943 417.822 317.942 409.62 cv
317.942 401.417 311.294 394.769 303.092 394.769 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
303.092 399.887 mo
297.716 399.887 293.357 404.245 293.359 409.62 cv
293.36 414.996 297.716 419.353 303.092 419.351 cv
308.465 419.352 312.822 414.996 312.822 409.619 cv
312.822 404.246 308.465 399.887 303.092 399.887 cv
cp
.0392157 .00784314 .0117647 0 cmyk
f
302.984 400.593 mo
298.058 400.593 294.064 404.586 294.065 409.511 cv
294.066 411.643 294.816 413.598 296.063 415.132 cv
297.337 416.119 299.038 416.615 300.969 416.416 cv
305.434 415.955 309.426 411.962 309.886 407.497 cv
310.085 405.566 309.588 403.864 308.602 402.59 cv
307.068 401.343 305.114 400.593 302.984 400.593 cv
cp
0 0 0 0 cmyk
f
248.054 449.807 mo
239.852 449.807 233.202 456.455 233.202 464.656 cv
233.202 472.859 239.853 479.508 248.055 479.508 cv
256.257 479.508 262.905 472.859 262.904 464.656 cv
262.904 456.455 256.257 449.807 248.054 449.807 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
248.054 454.926 mo
242.679 454.926 238.32 459.281 238.322 464.656 cv
238.323 470.031 242.679 474.391 248.054 474.389 cv
253.428 474.389 257.785 470.031 257.784 464.656 cv
257.785 459.283 253.428 454.926 248.054 454.926 cv
cp
.501961 .0941176 0 0 cmyk
f
247.947 455.631 mo
243.021 455.631 239.026 459.623 239.028 464.549 cv
239.029 466.68 239.779 468.635 241.025 470.17 cv
242.299 471.156 244 471.652 245.932 471.453 cv
250.396 470.992 254.388 467 254.849 462.535 cv
255.048 460.604 254.551 458.902 253.564 457.627 cv
252.031 456.381 250.077 455.631 247.947 455.631 cv
cp
.443137 .0392157 0 0 cmyk
f
304.57 451.285 mo
296.368 451.285 289.718 457.934 289.718 466.135 cv
289.718 474.338 296.369 480.986 304.571 480.986 cv
312.773 480.986 319.42 474.338 319.42 466.137 cv
319.42 457.934 312.772 451.285 304.57 451.285 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
304.571 456.404 mo
299.195 456.404 294.836 460.76 294.838 466.135 cv
294.839 471.512 299.195 475.869 304.57 475.867 cv
309.944 475.867 314.301 471.51 314.301 466.135 cv
314.301 460.762 309.944 456.404 304.571 456.404 cv
cp
.0392157 .00784314 .0117647 0 cmyk
f
304.463 457.109 mo
299.537 457.109 295.542 461.102 295.543 466.027 cv
295.544 468.16 296.295 470.113 297.542 471.648 cv
298.815 472.635 300.516 473.131 302.447 472.932 cv
306.912 472.471 310.904 468.479 311.365 464.012 cv
311.564 462.082 311.067 460.381 310.081 459.105 cv
308.547 457.859 306.593 457.109 304.463 457.109 cv
cp
0 0 0 0 cmyk
f
332.089 423.766 mo
323.887 423.766 317.237 430.415 317.237 438.616 cv
317.237 446.818 323.888 453.467 332.09 453.467 cv
340.292 453.467 346.939 446.818 346.939 438.617 cv
346.939 430.415 340.291 423.766 332.089 423.766 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
332.09 428.885 mo
326.714 428.884 322.354 433.242 322.357 438.616 cv
322.358 443.992 326.714 448.35 332.089 448.35 cv
337.463 448.35 341.819 443.992 341.82 438.616 cv
341.819 433.243 337.463 428.885 332.09 428.885 cv
cp
.501961 .0941176 0 0 cmyk
f
331.982 429.59 mo
327.055 429.59 323.061 433.583 323.063 438.509 cv
323.063 440.64 323.813 442.595 325.06 444.129 cv
326.334 445.115 328.035 445.613 329.966 445.412 cv
334.43 444.952 338.423 440.959 338.884 436.494 cv
339.083 434.563 338.585 432.862 337.599 431.587 cv
336.065 430.341 334.111 429.591 331.982 429.59 cv
cp
.443137 .0392157 0 0 cmyk
f
277.051 478.803 mo
268.849 478.803 262.199 485.451 262.199 493.654 cv
262.199 501.855 268.851 508.504 277.052 508.506 cv
285.254 508.506 291.902 501.855 291.902 493.654 cv
291.902 485.453 285.253 478.803 277.051 478.803 cv
cp
.0941176 .0156863 .027451 0 cmyk
f
277.052 483.924 mo
271.676 483.922 267.317 488.279 267.319 493.654 cv
267.32 499.029 271.676 503.387 277.051 503.387 cv
282.425 503.387 286.782 499.029 286.782 493.654 cv
286.782 488.279 282.425 483.922 277.052 483.924 cv
cp
.501961 .0941176 0 0 cmyk
f
276.944 484.629 mo
272.018 484.629 268.023 488.621 268.025 493.547 cv
268.026 495.678 268.776 497.633 270.023 499.166 cv
271.296 500.152 272.998 500.65 274.929 500.451 cv
279.393 499.99 283.385 495.998 283.846 491.531 cv
284.046 489.602 283.548 487.898 282.562 486.625 cv
281.028 485.379 279.074 484.629 276.944 484.629 cv
cp
.443137 .0392157 0 0 cmyk
f
291.665 663.387 mo
285.448 663.387 li
285.448 652.872 li
291.665 652.872 li
291.665 663.387 li
cp
.392157 .0784314 1 0 cmyk
f
299.315 644.354 mo
299.315 650.6 294.251 655.66 288.01 655.66 cv
281.762 655.66 276.701 650.6 276.701 644.354 cv
276.701 638.107 281.762 633.047 288.01 633.047 cv
294.251 633.047 299.315 638.107 299.315 644.354 cv
cp
.356863 .0117647 .941176 0 cmyk
f
276.701 644.354 mo
276.715 644.601 li
278.482 646.188 280.792 647.181 283.353 647.181 cv
288.862 647.181 293.33 642.714 293.33 637.203 cv
293.33 636.12 293.115 635.097 292.794 634.121 cv
291.34 633.438 289.723 633.047 288.01 633.047 cv
281.762 633.047 276.701 638.107 276.701 644.354 cv
cp
.278431 0 .854902 0 cmyk
f
322.388 682.846 mo
317.575 676.993 li
327.471 668.855 li
332.284 674.709 li
322.388 682.846 li
cp
.392157 .0784314 1 0 cmyk
f
346.224 675.315 mo
340.344 680.148 331.661 679.301 326.829 673.425 cv
321.996 667.546 322.841 658.865 328.719 654.031 cv
334.599 649.196 343.278 650.044 348.114 655.922 cv
352.945 661.798 352.101 670.481 346.224 675.315 cv
cp
.356863 .0117647 .941176 0 cmyk
f
328.719 654.031 mo
328.499 654.234 li
328.371 657.126 329.225 660.068 331.207 662.479 cv
335.47 667.664 343.132 668.412 348.32 664.146 cv
349.339 663.309 350.135 662.313 350.808 661.256 cv
350.324 659.359 349.439 657.535 348.114 655.922 cv
343.278 650.044 334.599 649.196 328.719 654.031 cv
cp
.278431 0 .854902 0 cmyk
f
325.25 717.645 mo
327.338 711.663 li
337.45 715.191 li
335.364 721.174 li
325.25 717.645 li
cp
.392157 .0784314 1 0 cmyk
f
340.989 731.39 mo
334.984 729.294 331.815 722.725 333.908 716.719 cv
336.004 710.713 342.571 707.543 348.578 709.637 cv
354.588 711.733 357.755 718.301 355.661 724.308 cv
353.564 730.313 346.998 733.484 340.989 731.39 cv
cp
.356863 .0117647 .941176 0 cmyk
f
348.578 709.637 mo
348.337 709.568 li
346.217 710.734 344.487 712.623 343.629 715.087 cv
341.778 720.385 344.575 726.182 349.877 728.031 cv
350.918 728.395 351.975 728.529 353.022 728.551 cv
354.167 727.381 355.085 725.956 355.661 724.308 cv
357.755 718.301 354.588 711.733 348.578 709.637 cv
cp
.278431 0 .854902 0 cmyk
f
257.236 725.309 mo
262.59 730.668 li
253.529 739.724 li
248.172 734.365 li
257.236 725.309 li
cp
.392157 .0784314 1 0 cmyk
f
234.24 735.108 mo
239.623 729.729 248.348 729.733 253.726 735.114 cv
259.105 740.498 259.101 749.223 253.718 754.601 cv
248.334 759.979 239.613 759.977 234.232 754.594 cv
228.856 749.212 228.856 740.488 234.24 735.108 cv
cp
.356863 .0117647 .941176 0 cmyk
f
253.718 754.601 mo
253.919 754.377 li
253.766 751.486 252.63 748.641 250.426 746.434 cv
245.682 741.684 237.982 741.68 233.232 746.428 cv
232.299 747.359 231.604 748.427 231.037 749.543 cv
231.701 751.385 232.756 753.116 234.232 754.594 cv
239.613 759.977 248.334 759.979 253.718 754.601 cv
cp
.278431 0 .854902 0 cmyk
f
249.771 698.729 mo
250.083 704.076 li
241.039 704.605 li
240.726 699.256 li
249.771 698.729 li
cp
.392157 .0784314 1 0 cmyk
f
233.013 693.104 mo
238.387 692.789 242.994 696.891 243.309 702.262 cv
243.622 707.634 239.521 712.243 234.149 712.557 cv
228.777 712.87 224.169 708.771 223.855 703.398 cv
223.542 698.028 227.642 693.416 233.013 693.104 cv
cp
.356863 .0117647 .941176 0 cmyk
f
234.149 712.557 mo
234.361 712.532 li
235.637 710.934 236.376 708.896 236.248 706.693 cv
235.97 701.953 231.904 698.335 227.162 698.612 cv
226.233 698.667 225.362 698.903 224.539 699.228 cv
224.025 700.513 223.769 701.924 223.855 703.398 cv
224.169 708.771 228.777 712.87 234.149 712.557 cv
cp
.278431 0 .854902 0 cmyk
f
306.276 737.82 mo
310.742 734.859 li
315.752 742.405 li
311.288 745.369 li
306.276 737.82 li
cp
.392157 .0784314 1 0 cmyk
f
309.857 755.131 mo
306.878 750.646 308.102 744.602 312.585 741.624 cv
317.069 738.648 323.115 739.871 326.09 744.354 cv
329.067 748.838 327.845 754.883 323.361 757.86 cv
318.88 760.835 312.831 759.613 309.857 755.131 cv
cp
.356863 .0117647 .941176 0 cmyk
f
326.09 744.354 mo
325.964 744.184 li
323.939 743.887 321.807 744.273 319.969 745.493 cv
316.013 748.12 314.933 753.455 317.56 757.412 cv
318.077 758.188 318.719 758.821 319.415 759.369 cv
320.782 759.166 322.131 758.676 323.361 757.86 cv
327.845 754.883 329.067 748.838 326.09 744.354 cv
cp
.278431 0 .854902 0 cmyk
f
281.866 740.004 mo
285.556 740.385 li
284.92 746.623 li
281.228 746.246 li
281.866 740.004 li
cp
.392157 .0784314 1 0 cmyk
f
276.171 750.839 mo
276.55 747.13 279.862 744.435 283.568 744.813 cv
287.274 745.191 289.971 748.506 289.594 752.21 cv
289.215 755.917 285.903 758.612 282.196 758.235 cv
278.491 757.855 275.792 754.544 276.171 750.839 cv
cp
.356863 .0117647 .941176 0 cmyk
f
289.594 752.21 mo
289.6 752.063 li
288.648 751.014 287.336 750.285 285.816 750.128 cv
282.547 749.794 279.625 752.173 279.289 755.445 cv
279.225 756.087 279.291 756.709 279.42 757.307 cv
280.243 757.8 281.178 758.131 282.196 758.235 cv
285.903 758.612 289.215 755.917 289.594 752.21 cv
cp
.278431 0 .854902 0 cmyk
f
259.95 675.986 mo
255.438 681.56 li
246.006 673.94 li
250.517 668.361 li
259.95 675.986 li
cp
.392157 .0784314 1 0 cmyk
f
248.418 655.321 mo
254.025 659.85 254.891 668.062 250.366 673.663 cv
245.838 679.267 237.625 680.136 232.023 675.607 cv
226.419 671.078 225.551 662.87 230.077 657.266 cv
234.604 651.665 242.821 650.793 248.418 655.321 cv
cp
.356863 .0117647 .941176 0 cmyk
f
232.023 675.607 mo
232.254 675.774 li
234.958 675.341 237.525 673.988 239.384 671.691 cv
243.377 666.748 242.61 659.503 237.666 655.506 cv
236.696 654.724 235.619 654.172 234.512 653.753 cv
232.844 654.563 231.321 655.729 230.077 657.266 cv
225.551 662.87 226.419 671.078 232.023 675.607 cv
cp
.278431 0 .854902 0 cmyk
f
329.841 701.785 mo
329.841 724.015 311.82 742.035 289.592 742.035 cv
267.362 742.035 249.344 724.015 249.344 701.785 cv
249.344 679.557 267.362 661.537 289.592 661.537 cv
311.82 661.537 329.841 679.557 329.841 701.785 cv
cp
.356863 .0117647 .941176 0 cmyk
f
249.344 701.785 mo
249.344 702.084 249.382 702.371 249.387 702.666 cv
255.676 708.316 263.904 711.848 273.021 711.848 cv
292.636 711.848 308.536 695.948 308.536 676.335 cv
308.536 672.479 307.768 668.837 306.629 665.361 cv
301.448 662.93 295.691 661.537 289.592 661.537 cv
267.362 661.537 249.344 679.557 249.344 701.785 cv
cp
.278431 0 .854902 0 cmyk
f
291.022 685.807 mo
291.022 689.513 288.019 692.515 284.315 692.515 cv
280.609 692.515 277.606 689.513 277.606 685.807 cv
277.606 682.101 280.609 679.098 284.315 679.098 cv
288.019 679.098 291.022 682.101 291.022 685.807 cv
cp
.392157 .0784314 1 0 cmyk
f
277.606 685.807 mo
277.613 685.953 li
278.662 686.895 280.033 687.484 281.553 687.484 cv
284.822 687.484 287.472 684.835 287.472 681.564 cv
287.472 680.922 287.345 680.315 287.154 679.734 cv
286.289 679.33 285.332 679.098 284.315 679.098 cv
280.609 679.098 277.606 682.101 277.606 685.807 cv
cp
.278431 0 .854902 0 cmyk
f
319.251 703.482 mo
319.251 707.063 316.349 709.965 312.769 709.965 cv
309.188 709.965 306.286 707.063 306.286 703.482 cv
306.286 699.902 309.188 697.001 312.769 697.001 cv
316.349 697.001 319.251 699.902 319.251 703.482 cv
cp
.392157 .0784314 1 0 cmyk
f
306.286 703.482 mo
306.293 703.625 li
307.307 704.535 308.632 705.104 310.1 705.104 cv
313.258 705.104 315.82 702.543 315.82 699.385 cv
315.82 698.764 315.695 698.177 315.511 697.616 cv
314.679 697.226 313.75 697.001 312.769 697.001 cv
309.188 697.001 306.286 699.902 306.286 703.482 cv
cp
.278431 0 .854902 0 cmyk
f
290.948 723.27 mo
290.948 728.931 286.359 733.521 280.698 733.521 cv
275.036 733.521 270.446 728.931 270.446 723.27 cv
270.446 717.607 275.036 713.018 280.698 713.018 cv
286.359 713.018 290.948 717.607 290.948 723.27 cv
cp
.392157 .0784314 1 0 cmyk
f
270.446 723.27 mo
270.458 723.493 li
272.059 724.933 274.155 725.833 276.478 725.833 cv
281.472 725.833 285.522 721.783 285.522 716.786 cv
285.522 715.805 285.326 714.877 285.035 713.992 cv
283.716 713.373 282.251 713.018 280.698 713.018 cv
275.036 713.018 270.446 717.607 270.446 723.27 cv
cp
.278431 0 .854902 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Buba) ()
%%Title: (Medicine Vector Icons.eps)
%%CreationDate: 5/13/2020 1:06 PM
%AI9_DataStream
%Gb"-6Bj4M-o/QZ\^9;=d6X3G%#\RKEQ)od25sTG1O;oC+bq.08Hh%.&:G%"'X=%X-OG#;49;T+tY-+n=X&i?MNGcF7WF)MAs(iu,
%peOp9.:Glt?iO>5H!*.Jg*97$)l7GsWHShVNKVb.B,];iX1ae>r$g21Di0nN8MTbWWE'sf-dpOSko/i_p@Yb>V<[+\X]hun0Tm%L
%eMF6'^(%KC!W66=pZnYj\*P)$IAa_bK?r<EM0VR?*'9]$$kIZLEC?3RT3_am"(P)pROouXdkE@JQ0B)V[k.<nQ=Sa3'<>K#SBFO:
%djfMjNV^+3fMH>?i#s+&bp%W;>sU.5h^X#@a>t-VDRIAl:&(RCf?TQ_2R/Q-BHj6H[1&iOr?mI%pb1=k!:G=U1B-_Yli.ED<t]77
%j*hIKZe1&M"UliRl0tr%.`d#Y+Cp`AM%i-nC<^Luj3SJZP*FH0RV'J3_!c/<QoQXnfNLVnJ.ITlV&A8kT,jHZ($G%f`(R"1G$8A+
%;m">bjo8_3"!!!`UMeUr]rtKu5UUHkB$.l&Pas;MX/MYo(3-4(e=c9)`(@4Vl#_Gi)q?PRIOeiP]tEa`$H54>ZDSm-3G:JHPK!hG
%km!-h1h]5FLLaTVe7`%&1]fJq2Mq+3[bIs!ibTS9;]`:qQ^.E54#6DDY>m"V3)rT7iYseFZi^8DpR`9JT\SckFdENBEgD"2[fdB:
%k!8QYEn.:_f8C@hR:7IYQl-l>)HaVC/U!$(YA-]a.K:[AIlarq,kt8;r,*AHh6uj#-K@Em'n<55I]BFCWN,Neq)h[?C5.;Y$j6Mb
%$nQ!-=NiJiH+-Z*`\Ou^ASh.9lF)\kC`A;kDtk?2AMR@=PJO8e%"=A]@$uB`5L&@#K<",+=<O7!8j$c.1677gjA3%\qmi^nFo6g0
%&23sA`=O[=>Q,%n_XCS2Oi$R?]1WX:N-O<*r!SY(n(8<fMjm23n2oTh^E=B`_HrY-49@'gW8VqOPKtJtSL#1:;jqFBUr)S*Q*Fs)
%GkaB^m[j^P:6f%:^T\R7Lu5HdSk-kk58+]c^L/e7d@Ftu%9H"=nN6`(#VmL[G;4=FiHHi-39#.R9P,(f/rp#0FErEAmrFRQFZ`'h
%4VhPe\[5f3)$(X<%ukqu[bYZX,46855m1I770KSNA'Q/@NqaWQ0s;g^9Gajjhm!S6#h<35G?5E@O8E<[GM1Y\)OKo+nB<Z3'^d/b
%kE`*nj($eacV-G>]K7i#IQW!/k4[-GEs)>#Iu2#56=nI)\Rtt`'7'F`<q]TZf7E5TlLibs9.YQ50W2Nu^un+cmW4T(o)76bC$j4N
%Nl`Rp<VK)E%bD`,gG:e4<Fo=-0Dm7eV(B=pKg5-Xns?6Dhu6FNK'Kqm+TEg=R3qt$s5YiVikI(gleN1\W>'jCs5^A*RfE)2neY9O
%Af9\0jKDgKs7Us5QfNQ$3KJ6;hg'\HDtbpaM)Ztg7apt^4An%P!B!dkIlRET9i/3kK76_kGZA[TGF'NMi)6<D\ALi8*ujfUlJ8:m
%4kgWoZb;E.PMVoV-8*j?F&9D<':7]j-=r[*SW[*^VGPjtn@':1pO$#(TmA2PK&7i,Qrua*$e8gQjnXjuZ/Au\H_oUO/?Y`>a_0&d
%9KJ(@aglfUbYiT<m6)t8e:a?s@(=^FgOu+6bt*GBiZF.Lp#k02Qc8K^3>c5N6NEfp?sNKQb)dZgs-,<A-p8a*V=KqDZ>"(?'Mjq;
%e)eH%2po\;0P&)FVL58G-f]K/aTqiRQ;P1*q1ai;XJh?e;Rd'=#"f3UVegoG'Ve*+Vi89Jm(p%u?F-$=n/q0@&D;ePPaOR7h%i,D
%(ISpi'6)q;4)O'-)-]gJ"S[hOET.PM>WsZPe?195^_Z";q/7<*bm)%@$Z'>m?q1>!AQ/Y=\ZDUE+EN-'7e4Dmda>^C.IVJ)!lOLu
%_CCaY]_Po(oiHWR;2I-=RJ'0%j9>;t8N4(m+"sEpnoF2Ill[^8A5d12\f`].qMYVTP8:7]Y;i$(_d.\J=Q*<'QZ^rbREBfnFP2EG
%86K-Mem&iaA7eqWeeKAaaZaI2IbH'KW0\W.S%>]ER1L:lJX0>1/Y,a9lCe?D)0bkn('9-U;bruMOj%>Df(/k"8Fi'UU3I0c,B02_
%.M>?Q=#<D74oDWV>S-G\-7;g?,j/V,A/LY+\s,nb"#UCf2cL_F=4a`Yq%nZ*olIRCMm9(!9eqI[6)/Nemh;.#r,\Rb-CZ3M#HKAu
%$VFj]A6"j\<1W)n-D*'_5:WDh=\+Sf<)^XS<&K]UP#Jq<j*r<X[!te2=(+cdpoL1qH<<Q_*<\P'KBbEe&B-3>/?]Bp<LJN=/D0C6
%M\4UE/VH6Y@4^B0"?Oa_"'?.eUs5Y</ZNG`J6?SR%S0brVa%`%gR(8ACk'O)]Z=%YTG:tU=W1s:b?JtP%f^5Vd%;`eW*1#WLSiLk
%3GqR,1q#u?LK5tq=[m[1USSE@2d;PMaV<ek`JAO`TK>i<N;`qDFo3M#VTgsDH^YgN`OX2q\t6A&N'JcZU*]^D(VKh#AQ1R8ct6dB
%0XJ?TK%:Mc?A7GQfg$i'TC.`#RFZNr,;bQPqoKVun<1W8V)#,?-ffR1Wt:4/R[Zhu0#5R+:JMjFJY>MLUu\dTn9WF?,b(ctiI2\P
%bE2?@B1+;<N&O2hG,hu0+7'h2hf9&t&iK&/@gi%\/<*kS0sf>C?'sItG"#(LT;AK_CC\eB_FtfQUaGXq5As^sp"1nW)OM9*@Z%i0
%2-aaMD/Q_)TEnV[bU1"f=jlG(R`61sR(+QL\^>5WPpVA)"aan*_G$e)]!0g<dmS=DAcZ*RUoLX+),9JTO`cciaXN1.J;,;rV-kMP
%kT#;F5p_d^]gJ'+.GEB$Z9atCY]6TbW1m`YrlNFT=AU+0DfRl[gZW/QA\!"j=>TFoVu^Uq.3poL6PTPo2LQf.iG)I*m/Ecpa7<]3
%X<V#7c/_\I"-*T>Nb##T)%hVAH#`!P,Gc_a;X!n?5=H>^Np[dEoZrSe?pkMM-PhCm.$R1N85r#]BUKuH\tYSA\BO8l$o9eZ`BWW4
%Q/c;!d9A,l#t-Sj1dN=T3-[5,Q3o>Sd6<.(&R$qtcK'gI7M&@(mfCgfEteI3:t!cW(#)LD:+MGT1V3<'#^^$dV8u=qe&BPIhs#[!
%5FJ$3=qFPRcX8+e'@/Hl3TS-`$&?<$._Ck",A0,q.@4mB(g+:Q;E@oS4E[MDV<.9!LmQlG[)M!)=nCZr6IL,k1LK\Z2PF^lf0R=3
%R;"632Xa*$/<8A.6aq@)[O1!uY)AI#-S>fC(VJ4f\!.;0O"r8MNo!aXM\;pSs!H37?8U*mWkk6n8]=-PF#%_aAVEN2d%6T[g$o!O
%'BaWnq0_C=<d.'m:Mr'R[.alVcED@&kWMtjBVCF6Z0(ju9\^*N*oN/`T"&"g*C)-cH5TL0MI/0!)P/Fto87panZ^QB2D2tHrZCdc
%Z.%qqs5F-L"?:b_J-qQ&Ss]HAIrG-=lg1k0Kb*o]NG`gPIaRrVJ#fPhj4m3G(->TSFOd@WgJ8F``d]>F$:"uah_$TcX>HQ.C%D$p
%mCZ;uZtj!#6&>8^Pbq2Z`=h*k3&ps&PWDWF!;t`7]9SBiV5ZgE=5'Yre/@:I[saN$Bf)jH+@Q>$Ob\=ae_rPFdtq.N:^?LKlo(Fa
%<i_M/<j?pM.1L$A^uo#o6g@/*2IA&E*5<fr'7O9GcU\IMU0/Elip]HE(]?4'UE?#)Mb:Yk<G:@dP],'?Gk3(uHrXu,(e`un-)6D`
%lWc8M[/b+V1fs_E<#a)t"F-"PFEgu*2'X]TC9_)]-0PH7D3@SJ7?D[UdY_F]ZhbP1cCe_'fGH+pAViW6rih`m<',?-J(+9XYm#W*
%HrG:E-p.'J[Sjsepr1gV0ct6[<r].!lgWj;b[%8ihX*9FHIniuWmrTmQ76*>Wo]OFV\2U2F!"6O5/_B15<*$>iMs9U,dDV'9nL.h
%(&;.:G"%gKL(pU'CKpqQk0_C&$@a7mnE9LAOJO?rr*:aqXs+u4b0;h"=&.lJWY5CP\);+sPM/5o<L[(/1O2)\Q#["\Yg@51dib,.
%E*mHE:)>1fkjD:Nj?f]pUS0GY19o;FSThnj/NMjj_mRLI`G>D&&/pU%b@u1$;-'Jsn@$]C2i]tb:2-(D%%u+IEd/`\$L`^AhjQGr
%9)<eNcAQNehf=0gJP2d%[\!'!Kq'n>Z[0*(;!JaE8"-\jiJ>?_fYHTG"!90ASWe%[,;AQ5jM-tJ3GrqC-"i9EV$Ms]*_"K,B3jRu
%lGGS:N/)G#L^^,%!"En*>/a73'`f,ckUitSEZWur:.A><;]5fW/)pl=#u55EHg/\t":@e'DUso;5?CTa\oN#4Q+L]E_*4s7D,f4^
%B5ShI94r.Bc<Q$qd@C&R&S1+RQWs<,94)T$b:S.Q8NC?L=TE@m)A9CEcY8<ucUC04T)?.+o@p5c?PUbD^]3U/\p<pl=S7lA])[`g
%]\4AQdHAp-M-r'I46<R8]0](E,<7d#ijW_-lkR/"G,8;:&"g8_[[SMc:H=<@.aPP)<fUWIP]+reLplY_?@"I]0%s'5`+o(61@-pN
%q>oP5Q`GL"\>tLa(EQ1";$uL$YD0Yr+oUu0)C<<Nb2!hRmA<fCkRQXVH.;d)c?-G*Xc$Z13A)&A9i7kaXa(Tmn:JdK<f=(RUYbDQ
%lVV8p^WN\;-UgNZpJ8+mG:#Z'Y;3!c`s/DUSc;4aV6QTg=N-"-%?:CGJB%WF\rC^^W73n_BVC7TkmcZT/Cf>K\8uBV6rp6BDtcpB
%iL'F(J]0EfQFe-C-ikM/C=c;ubOmHiPmFDWH<:.mKS)2;3"2:W&.\8))u\B''HGWWeg$*Z8Nq][T6Zu0X`WbZjoR!N@]RqfW]?Uu
%]QU3<j#fB=P=0^E&L=hGTl6IPV1Y#&95>od"BitER-H)cVgSKMi7Z9NLX%(a.@K_AR4L!%q$b/Q"qLH>)NALCjZ*8V@>AWDDdsCI
%D90g)=+sktEhs_/,&Y6OoedQI<)s\QApk7\^gV+cbAmb.-=0BTnkGn0]Y`HH&IaI5F@-g:N%KYNMK4hieqM^"?2n+9YF-,3)iJYV
%2U]RL=dN9LOEiAa'$F4XbDYmh?7%JCefu#jZbP(d=M=<8Te(G?Jd>:4V[3\S*4]B&.(GP1)0Rn`\<`k\K"p.%mrq:bbl4T(o*B.i
%ql2FR&p'g/O!<q.B!.$a\l1b8W_P"3J)=Vp[dZpYf_CsV^]#^lXDP8.G-b@'3V^D2RppFk<DKY%bsg9"RgW"^9"=mIqL4\s^Q(gO
%IZ7h9\-6MJ1=!V6?%gFS;370S:eh45dCpJE,\C8p7:N?d?QB_`[b5".&WiA!$SKTphA]!g12ErX,3!%,Mb:AqmDMcm(9NF%g-6DU
%E\8S.%oMc':aoHF0)g]X%P4YUYn_6ZElm'&8WSBs3D..//p1rC6nl:n;%2p59FJar<hgFA_,IVn_P?4S4#\4M@_#b.<.7>WM#=!V
%KiPf`O+L9/e?*j`S2giu'e"H6BN6R*V\nB!8Z>fD]kKmF*Y9`G>=_2e)1lqlG5deh(dDlro!dme'^M#f,\C8Qed*$61#%Gj4Gbg,
%%U*QY:81-B@c"s<bEF?\'VCAl9P/aU0>^;F-qMQV0P8-sU+GfGLJb@u/^L0Hb1&g5/a)1Gb2(H+Z[WaeZj:;AU*)0Lb&_hDAU,&&
%7T@ZBT1+n2^fcmmidKrhm38&hM1W[Y"`ri)/4q2-RebL=#\R#/+>Gejgl.alR>5(:Gs#"=Bu*Ld2/[Ifk<!rqUgnYmR@(aJ)tPit
%;]WhoNaSRO(T-oPZBW,alotu(c(k8q&hKN=9L"H$*.+)bAgu>@aYdQWf-6;a.G'l+D(4*!6E]ER!*Pb+964s9`L;EQ\s-r&WA^/D
%>8h9M@r3[FQ;VQsUfq_-kj1OjXIi#A(4cU4C'/FcN$_n$k&M>.+Mi(9/XK?'1-2N7j&?Pi`BS!nE!]@-&pf3EM*-\dOU`ZAb2*n7
%bI<0L&?4d@)FJQa/<dQu)Cc,^]L@i94`c^u78CqYMNj3Fpb!lNh_tBB5I]U(_ucLqY11Y?7AW3G);>]A2P";))enjEAT%saA^Zo*
%9)?tR@bR1=Ls8rJQZ9I`*R+:6CSoKg4]HYIm6U/CG?(B20fR/JQf3_QQ2qS!c)`StM0G"ms%[j7enh_02Eg7nGh7C^jM=YfRe&\I
%N&t<d.0Up6po^BnR-Rs]0G3;kf>I<H69&YbNPi!2$K3,b@e:cE%`=<:KlBlO7JP/bG)U8$c]rC<;L6+4M2AYjSZA4.M.4?WBdGd#
%)\E`=mII.3ntt;<m/J\)@`[[1D[=8BrpN+p/GFX\qnL>Q?Qh"@#?[+s,>-8CT'p^GG</hXkaq6054l,8o52]tUj'B44+ltCEmJs?
%k<!bO2Y2jA>e.B.7X7F5k1>)n9]eeIr,Jae`o#egW`CaU3`'4ZKNV+r+P'cUepP00PB@l83It#k)9,;<C8Oi5Dn@'E(].t&RU7""
%06LJ8i'Tr(ZuGPkH>1s[_(n?cN0)k[Hs)R*D-=Ph?a^rP^('4hZX'Ps/!l7_hj$[]l"mi!nogd.X:O-N>)(=gTsJ=oC`,8A+;M^(
%?H1</h,oiB#eM8!s/XY\SRF2GKr2g@H!>Z/6pSel_I!m"21`'B*2^hYaPA9&_Re:(.9Z@o$=\_8-/1(DaJdp:8t`k$Mfkm<XNa1o
%[+p2dIS7]b+s83LG(O[+J!HFn3AK7C5>A@_-UQ1`Z4+As"#%j5b?YCdLbK2A?:5K^i\/Kjb;/Rm%(n+n0?_/S1@R%8JX>YX\AUM#
%?!%;m]HoA9JK,&QB<EIM'89b)5*3-b2ej-b0XaY50oM2;8s4g<ZAFu/lo"CV-DJ`%X='K>[$NG?T?EdR]i_CY%Z?UG@Hi&:MT[7Y
%Z`G.5R@%SR3A**Bc%^7t/q@S@02C^3c])gIAmi3&b&JKsgF$C]AbMs3p8-MQe("BMnPujLpj40UhH;0SMAu]->IX1d`[6M'!,["P
%r>$2FKSLbp&RHr`6FXpD;/d@!3C>e(1[E55k+u/>ihGg^E&G"mE^Z$08!_unRQho7n"L=(B6G*?)47h"RGp-Gr(P8]6^n;kD*ulU
%`cGf-I=7%=3Z8W.%&[=:Rq,6NJAg?1Ehl'RU>2joUIIQ3b)(9abq"$CkkK.V77\T8N+4F!)"Scg0U?^;R5TSt"c-YV_-n5%Qs!4/
%)98*\9tQ?obc2Le`\Ed!N&c`)TSM)I7QTnAoZn;h5J(SD9:]PbD5.a*HoBRq9,Ol.>=#7\+.q]+*@)CD64sHY\T*r$NT3d1;]6E/
%%/J+Lm\Ea?PY33"qR2KLOqBJ@S/9pT^?,:X3qZAb\$N"1D;c6VX&?W83rh;9449&k$dYg)?`6@[$^dJt6'Ch1aTsPLF;e"MMT1S_
%a,<un(1j==Z.m-+R5\fI2e\U<BM(fa0ota1g7W-`ISRJVo55:V4eG$V8.OLXH`;phoOO@2A;Vm\T`V&fcK3:FEN^c=bkba$BormP
%77(UX%X\"$qJ=fdnp(RT/iOIg&?.J2/=X-9"@Qo@`h&MN[^<Palj+u<VB*Z_qJuU&6nH$^V)PmUk*FlZd[OHeF*$co752$5hV9<"
%Esm4TD!B9jP<Tj,%E=pLEtL*1\oTYY+dVQOd[aURF#3(+D9*+Ccp^<2em1=bO^,IgaNTi@GM6_p03cCDP'-$8/V63rBJ3"H]U:qK
%]XqQs,pKiWbIeJ2r0Y\*R#@21@KFF:1-roRMlhmeR&g-7n()cl=M!?a0W<AMQ7AFi>EQdVmEV>=PUNpfG?_]snaYS+?W.R,R($Xk
%8&h%A<>:_'k!SH.RdXkNURZ0nOI014eULL9FW$:T[=InNagVF.Wh[=s3U8FC1+%(KnGg4[FG%.S?>&.4V/h35oiARSr$&o5G$HLd
%ZDBpbB,E/8WgQ>ih'ih^@PAK[kcJi/fL7c_eaBjuMBsY8UkO^se4I!D%:h<t@>b(dWHBHQ5^=YoCRRg_/4+5&,=5EPV[@oBN"?6:
%hQlsAXcOqZ7,%oNTB8C02ALmG=^#mUkg`Dudd,<kRLqXF#'B.3>!ajZ:1+G%=1L3d,3Ted[(1[TNOgnXJpru];)C@(dF'@Fg-js+
%E\,f2>T6*F^)K;s[aCh?;dN.%D].o577e%V@9c<*0\<eD?D?@3CgTD[K/V0op%>OE+WTRrSqg`gHpTfk\#i:=kBq(;?(fm&Mq(G_
%YZMe.C!EDN/@I%!X-s^d]o8e.S40-a<0";9_lPB/.(hD&at^I-SpA"/Ta/6[ND&(eZat,t,KS'K#%uKMR?!B$TD=l>.-?[;(,1Ni
%@_F6T2I4HfWrIdu9=2cSAnU)5ZtTj:3DW=J.me:hnf#`+%$qWjpi"Mt*b7CAoP5.1F:6BHS=b)'[0O+o,>LDHn_HC?I._+$>+9@`
%YuoT)JmKL&k/`qW7C3ZC_OL?H)&nKq-"D6uVHZ@L@$tP7QIl'<G0N@Zg)Opp@,r>j3a&OXcH?lEZR?>2A%%dA#siYW>U,c.`?Rlu
%UO-]O0,<f&[Yd7T33@S)Fc5dN=e"AFnN=t\c:)hQ8ONi:'>bicL*&dZDcrOi]CjV">`+Y4@^;etO:mJsAp[0/]59Hi(LNQ+DtS&T
%\N"g[pnUok[kFJgUbIE`5FGM-o1%HPG<t@8nA/4$cgY1o5*hlQ0n)1SQE!uP*_tJo\3+4\SKjG!)Sq)f+K_I5Aa(aI07/a'&PP^A
%g"T!p&6bba2B)^hFtP<<i$X$Qmqjk(*Lf8d[5u?qWk&Xuo"*]Q]2!i!\#cIl'^'cM6YAT7<V"o752RXUe?,)9Q^h)4=2dcp_+!pH
%*dA0-;j:E,>j]%"/6u%X/P9sG@_5MFFk(534/4;ToLJSI,mpjMa9\G1UN>L\)Qg;DVGFaq+ALc>d`4S%rD-%uK&;"Ym-fUnGa%pn
%9hLZMK$TJH1\b+mk)h#(^h'QtVEBTa^6)n<Rtns`B-:CBW`(R3+iS+/W.co08d#P(,PPCZ54Hs%A/b,]\'c.K6+HK8`"4oWs,(dJ
%J5<WV+BMI(<*KCg,pccZAIEraFi,t6CcQ36QD3[6MrfD$R$)>iM2t(NF`c2sHWeB.$.0i682hI;`9R6.PPaas&'F!&B;gMM$0pUN
%ECsLV$\.BSS2W]&-VSe7VO(b<.AeI.dft2f+Fl=L<_\\$8Q2rAKqu(e)2a8Kg5omp^gF=)@P"AJ;G+uod`PH[0;\;=8l$S+s2E28
%V<jqL1ng.6QVquUAX?;<6<b;o>KO<!%4to:<b-ia@,!Lp;b"Z,d5;jpA]_;9F_Lt3`H+`CX=_E_;EQVOoAnoa&lL_=,dUrqZ9i#)
%[LEqu.X`m;o27Ec'[?JP1bV;h;D_0%RaFZl:c)rCDY&Q6B,0cE=ed)q$1Od=?HVG&jmt4?l8q)eq2WPLKoo1<cAmPWc'7upPoJm]
%,26ih'/#3d@:WFA+!uo2-EMd9CA5#3LE_bj)HK3WCn=TeeHl(!]0gKP.kMPT3r`2p[n;%<0*q],o>i@IWN/MSs0u$+dp6@V=lb`u
%[MQnp@a`&RM<pl+!9G>>G+O>94!X,jQ,g)=_r>=t&4]<4@HCta\dtdt:9,$hqK?2IO-m`;(;iuT1ds.s"lR@;[IYsuM2s0pB%<6d
%6^QTU,V5(HKI(/q,q*hI#Qm-NQ`HGTVu4OV(Ha6LSPI461_.hZ)#*<^,A<b+C!id/Dbl/l+9)jC(]N?rruIC0O_OKQh?4N7:U5R[
%Z9`DcRYPT!:Cir:c9i@T[%SrCeSm`U\T#cFR'OXP*ri412lbN[rtdd;g&iAHK,B'G;<l`&H7)q`!)ZeB2I-=R-N4lDl3r3Y3TpJc
%%mO&&KtVQH2q?-%eB>)V^FNqAO)M4lXZiboc[H[7mHq/k\"PL)0_R,`2k"pbcabE']hol$_B$d!)l7=_m)s]3'"@*$9H\RdWL%&/
%j"h*1=l>]XVt64YM1B9Dpj^C"s.1V`:WT`073b5)0E4IE),Y#Beeqn:Ts42O\lcbRZbc-eB;sYR1hnfhrhdi4>O<WgFJqQ8*Cf5A
%RohViitGqYoQV-e.CUu0ScSh^"%h@P<_A8p`]ZP3pk2/,lkpDej7+"VI?JpV1F)\9MDQBN^FSF9:JT@]7*1i^c&R>-PnW9H@iC#)
%F=(tuJo!e/4)]5VUaS2=SV'u)Er;2()GGXWRB[f(/FkCM1rb/\_gDHd2A>,L3LsUsm&L(n0_W7&b_*2,N^Vm;5\[D#jc*3AFDH^X
%Vqn:p7E!Ab.((_O#qu,VAl?++aB*pES\!9B*4DBGdn'[i]Y:eQH;WC.Z0]'8?G*sPCgZq>Z$*J$kq,u<<nnF_8oB0kgoMb):ig.'
%%1tuT>Z:NV<4C=I*#73KVcEOWVmk@/^7ApQRt+)B;X7B^,^2G9@$+p!F5A=Rb)$`X7IP-t8E<Z+EErhL^<u<n/mF<QF*-(B:qYG#
%''C+jXl);-gpQQA;XF@Ae%YBLTHOO%.S(8gb!EMcKHZ;RAE^V)%n/8t_mhf];Zc&AR,=`CCuH$JJ7bVdeFR?8[aE9aj"\<OBSn[[
%YS%qlfWl/Jh"!cc@gD?:Psa"kbhr9a,YjkZ3f.+PdOCbhWg1jOJ'pc\rCa(cXC$./QVQPEdIareoS4S_M$n6e[:gI;IQOA9%-Y?+
%/^iqkI7"@m.9.lm^]5CjIfP*oR.^0?._rFA9&3(GBpWgEl)'Aej1!KP@MH<-ZPJ[j6<'U+H.OVlE=rH<[o4<O/d;c]"-dq@eE-/4
%C'."Gj>=L![a3,9mX!-b)U27).Iu'\@'/[Y60L#=ePkY`WP0p,?lBE4;R))lY8sW,Ubn%PC$fP#AV6VIT_F:KH_5-Z[uYjTe[N3p
%nsahF&$pO)NKZRGkDa)/-TiftQ,K`CH/a?=$Hh_n'IsJ$RKnHBa!"3>L(uf?B??L/U.?qYKI('pn9@VWU.fJ]S*>f'OjnA_J)A\\
%5a=+lAZ]W!%N^%$gGs]UGe<`jrK[6C?mEA>g8eLr?.SJXb26E1I@R8NPO4.Fqj0>'_:J&O^#s=@(L)TsO5K<4\g9/);r1V,ZDKdH
%UiuHEp2XGb\@_]&q/ggn^"M7Z^K*7dS)*JK]p;mf<@<4jnm,[J7rs\HQ"SE9fjs[DARAeungEYJbiW!8bg1X,m*BTamIS>DWn&T*
%;u=V+X0q-1K5NlR4ZlI=X?Jh%DR(),X7LnE4Z)O6o>A0n?W/>?jG2^-#0Uk3gYKEcJ(rdo-YmMNop'EDFg$/nh%79j5L'bMfo'dH
%B"GQXrO@!4^?T73bg1<c,!R,[960"Cm`pa2Vq_gl\t/YGq7QgD4o1H"0CRdkDcf4GVN*SVe9MTIMrcR5A,fe>/*0D"]@G,jG.,)J
%>#?BDV;JHU=PM(_I\4qGh5AR`]R"P)>q-Smn[HYEm\4[>?-CZ.d;2f(rn+5uIoT6F='e#GBWZ^MV@(A)IN\bgG.1gaWR-X0rScLK
%Wa:!V>C6'UHdf'EI9&)Ic1Zj[C6eMS[HfEtCU01Qec#Q51ES^@W@F1B.[eO*9X=TYg$6SgPHL@029+TR@:_C(^[pA?[r1NA$(9WL
%@Q\mQAfBRYG!;/*CanNX^/;MglRRM6F5uKeS<bhJWU[-OUjAWHIU[+!#5q@N8Fj4pDmGkOSO`L&CS+h`NI`1!VcK`%F<d@6hq.(Q
%[HI?+n_;?'mPU?WXQP%OCW\#9+#s%j[.aECDI(Au\9oVA3dnHC?2jZn43aW]@VG3QXh3CSWUq]Z#iGP'aK*XIY`tmp9YZq>Se8N>
%:A]`WHo?G>;CC.iCY=Wjf=u@Fio>f.j8Aj;qf(ZWqp[nYI@.]-Y5I#Pokj"-\k-\0:<o6"T8iF)gmPhK+g$/d*TXOk:X:e]T>p$e
%7;_-AT=K1r!tCn&0[6A5_sbr5r`+<93[d+=S^0JK^Llc@[,rZb/C8)XhlXTe;#J9\4ZBJ%me068Id5uoVq[8;%rh]9E$s[Ul^lk\
%0s%%#%.9GD5*o>'Poi(@Z;U\fY"F)Go4'/?"Whs#^6WZhhg=N:9\eRe\s'tsoAZe+,s!2-5uPBGm%r!6ai$,"CX)5gq:1DTacs/R
%nl^8/nG<]V,YSfFHXo56eORk3R4I=]3k&-\k'_]4Fmu@r_WEgZ7Rl3feQ$r!a?=d2\\-(mc0`sVUQkRW3UNAm_jAmaTuQQijYk]9
%m6T31?TYGIcqWfd9mI2$c#Yt9/pt5O1gVXM.(Arm]R[tb;^>pMHdg;)S\tAh_s2D/X++1$T'uWnrF@!-^oMR>cXh5TD/:2>+PDsC
%?[c+T?F-+cRSVBs469YW>5ur?SQpSj#]75'l8?r4XZ,)dq*uCdQdjF%eRPQOp(:upeI&GuDPQuM4o_=a=XJtH&=?;mfA=[,2k0&S
%;RjBF:*)QIZhJT"RgbQD^IFXfcM/]6quT7`n^(>l-j@6bflHc/Qeg5FNu_S\e$OX5XVV(\F7Q>Hk=X@@*XR-54_=FLoM_"$eU6Cd
%@"Hn@QZ#eMb#&e-I/;>VI$FVpq/Mt]j\ItA44!J1eRU%MgjN;HSY+tD!R9)3g"6,qNkJ4I4biA=nc^H7RT,7b'T&efHgSf:g3</P
%ic.P8Z@?doaf4NpP-%;iji>&o'`BA^Y@_Ssqm,p#3NG="%D[ET<RXnL\d9-(5NS>+m[fR"RQjb5UZBmnLK$iEGC/8&\@%loGpRsG
%IAGqqmUW;Q.%JIX2uWf^<3RP2#/il))hHsp2<<1%,Kn!`1#_>p'c[@"_jF>c33<%ee1neL28Y9`_<O0_nd"""lhTY/*Ms=T7mq^U
%IM&N=1.<g4e6^4mh1qs026$WBQ\W2)OK\>$4qX0Xadq^$dE9ksPYYQJVJ!=AcL8]8d5)Gb2lH-<Ge?"8L7Na14r:"%;2!-gIo:'8
%0QfNd&4<[Y1+e.]s5l3gWeLEthS?Z>`ZE$C,Pgt%+b5p*0*CE,+(.$[kXF\j0jKS=Yf=N^kt2?s+GWTWO(^\4@jTNrf1(!EJ^qmE
%!'Bh"V=qE#plr#QV^ss<9Km9Uas/VF/K(fKYo9ct!39"mJd&["`8hu[1dlIq:dE=h1iN*d9%5$8N5:H8/M=n.1g8A\Hes3l+F^(7
%5XZI@B.4cGqMFnr=\4/g>]5-%hd/13^Xq>>m*2OFcl\gqrkWKQZhcO\l9;H!7"'`'mF@eE$4U[@I8%EQ.Qu#Dmi0$WNB,/Ec^rq(
%6J_>lHb&\-"WMEtUh!,p(=n&1EgNU(3E]m8pA.o2%t,rXXRt'FY+;(HF&GO$-^dZ=p&&ShB-"\X;)5UF(\0!a]%MB[B.N>NI<ZOm
%7XD<9iUQ2>DXD;9r:7\OZgF>[e(&1fAXn5F[Zu:6m,#W$k=sT7?e8Y>N8$%'f"_eVq;nC+B7Zl)0=/sQgel.Z$o_!D3_X=eb-l)o
%),JZ!h76:`D4b`PR:pa*G?_2MpY+2fdhcQW>'d#Vr+e*T*"Q_"HgOs[24q"nC$Cns"lK$LMJI+%2u^5H%c)dTeTg@>_V=;J?F.KF
%_d%V?2HG70H2h.(.bChQn3$JX;kN(^BF9I<j=]<MrZ,.4PIbuPqfc^@K0-!'&+C]*kK]opVcfqJ>*kbsBA;9jKh:t.C\Do)GRRjJ
%jIE_e;I8]QG.CsV%QSC-c`uGi"FUA8\B`'P*"$k=^N(pW_+3Z2]6CsJJ5,rZ#Nl;.:$H-Q[*^s7FCVcRgPq+bV-PgkP>,+6='m^Y
%@$GSYoXET<DMTL'pTI-?Hur\-2a>$(!M@&0=!,+=I4#@Y*_GL:p\[i;]KU7c&DL$9Y-2^,`V'i782AVIS_4f1d/C>73bYBt;E*F=
%,d4t$H[b4g,g=N"mjWV\onN3la7JLdT0.7(Wiia[B@uAqT:!7FY<Uiu-#e"QFe`m_[P6c_O?25Ks30rmT!ag=p\/LtGh4$TIX/BU
%<Li^)P=HGeJ`jdOeR[tlW>-VehQ@rsHb(!9Za]]/\ngNLj\-m.%=Lrs4dc'6hk!$QkN^kFb)0K2r5L=p<-X[WGIW!u4S_s')jlD)
%Di[*oj,":AJ#]*LVJL'+1Afbi8)TMR)l]%FqtIY\O3=r=gkUqDh$(%7g&&GXUQJo3]iW&'IjMeNrQ=&;<*r[YidCG[rURHJI!*D!
%4j'@3c7sBD+5b]icS'IZ.ll6c`+A;97!.)%XlPfffiP;R5K5A:^drcVI+4bP_V(1n%1"f$Q`_6n?i1Z%LZl0Q.3#<Nm08pI`g7p2
%U`)d^,7N>get*cr^<YGGSu'3jIX'N00FL'kII\o#R9)=-63'GLJ2YNo:h9$SA!acrpPDkFr3MmeG;f:aWd6k@DQI]sf"JQg-_Cl1
%5o"QHh@/TJWVu'<F`aq_2>>"%G4;u56-G#E2nSjOXMQ'-H+ZocqSu#TW6[o[[9VtPP@k`'.mg*(/P4b^I[&)Ag3cPtFOb^8,ga=(
%qRi?EAY5p:Wk0Y3=7(4tgD;Nh06am#2btl7PJ)@41;@*Y#oG@t@#UZ,h:@>:"Uh,PMFA#kZ%)[n_!j;!;COj]?f)i9pHItNA7*)8
%Ojb7R:6S?m:C<2/EUr>PEW5=@U[Kn'.D<LJ=5@]`W4]CIp%IQk5i:OJ)>EaqN!Ke!=CL7AnTGDpm2a3?Z^I-j<W\mNFq/)%\dQ6p
%V)a4.I<(ad]Y$@&WL\Bk5^guerQ#/cC%b:B=^Z>#IIHcg!Cc?sFn=H:RNWb,E26tt70eKepX>SFougng?eG#B'(/r)Pq':gG&lc8
%T:5p""O'QthjlXH3(t?/j^.CnVjd^n;6WK$rQ4L$\+bZZUc04jo3ea'[iBkSh(e>Gg"s'b'@/oZ'5:Ip`S?N6b:4p2f?)hBipgIB
%k[GYZTtV],Zh2iB.;d]S08ts=RCARpZ>Z%eZ!FM;")lid5sf??J8`\.fo(c4aoIU)]/pu+Rb>B,lOPC[;:pP)k,[AlP^ft,%3L>t
%bYW^gn\Vq%>QX6R_i*j:S`e6KLpLqKpUPDFg"2gk1Q2S5@6$?7]4OPoh+M%edIR%'>^mVn`4F\%R$$:Xg2##@IJ1po0D9N<GEO`K
%UJ"EYHTtH4:Xa7Y])e4Cn-*J)9tGN;>`XW?YlDSBquF2oYp<W40i6cg&%A^tfm:36qr.4g$AanhYJ@8T%HFIV?lRFAeR6@%hV8#%
%U?$uRIG@P"kKV2cR_s8`[be)hd*:E>m\q+lJnM:;'l!]khMs#LL#Qh$jfMKFHiE7(=_h[Ke'>OQp%:U,qtej^ouguT25QXRP]s0n
%eDZbW?W![@G>GfeL,7[X\Ph\&S?DiB?[K+oV2hUgS#HMed`T3oIK<0NHD^B,mH8UsU['1-Yu/bQ7`)o+MkT`eGN[ZP$*8^pQLXJD
%k)0-/=7HP2m14;d*/`P63fj"'\aBC#;[;buk#4d0B4iZAJ,>c0[),!N'*5\tH'pfgmlYm*;?EUjH=T-cE3A=ZWGe.!b_p<_YUEfC
%a9YmrfEOmk!mI>e?.qMIO$=-=##!KlkN?!^rdMXlH^ljP+2,g'UiKjL>b!tCVq6RePlC7.Id6E2kofl*o'+!+DVhIlNjZ4,+`0@,
%UlHO-?DZp?TDm"%j@ekg9/b#m/38P;!&&69q[B=M(E^)M+,-9PlYe.cI^S]@%MlKO2%5C-'_[C9T6q.r#O._;qYH'3fKFQgMk[nI
%h;A8-&3Z"ff%KkJ5P=I/jp0[IG_!5dXOl&^ZS&Ds=G:jZh:;).Qd7khq"Yu/"]bBq$g9,@,WsQ.j?&VjfEOG"K@ht:?9Un_)tN$N
%!Hl^m$pf<Zh,GJ,f/>3WLe$pc#:PrK=:2,';3-.F;&]8cRh+'uX5M*+f(l:eBu4k8%Q?4n4i&_jpCFU6%^tc`jab+[5rnTFVPPFF
%lC)p:WV=*MbPTrtgAqDi\$^7b1irchP'OEsq*GG.F&33Sk+eIO=ERjZ`iO];<dYtH9VB+gWVfF;@BgVt=QYOc95m/>pK7hCIP/<"
%SbY-cEr%JXIC8e,IR!mZjs:Z-od@9i&tNsaflG>D%uK1DOR8NE*i<^gO37:)_q&F\+I:W^:!'TT<j*A'+f[EkjN#HgI(#NeM-Z]S
%hgUPrj*17F1St=]U@!;!.@iWXh>[7##BP.Cc#9G=me[F84,*LNHRnoimm*a5?;GKUDf:>tC`@33*GG2rqcu<hn-+f:C:\/o>Eb<E
%?R;ZJq&6'e75K'ceP?EL4$[Ushhif7rURQqp=8GCSp.?pm<h/$8h6d%f(ETN,Sse$bb'$lD<,m_4"&Bmj&](#\-p8u'b3Ht-YM6r
%l'hpGBA#r6\A,B,rE:qIs*C."Q!^-Hnp&%e=@,ilKbo"/B^OKUGs=rW&Wlu0o=3Sk.*#ZciV*dGL:C59QVOuRimYeeF[J@GqtTts
%4aZ_%PP,*H>ib;Ho5=QJ\*b!&i-7r#&g=_ZT,GX%fffV`juB!jQ0;C(aGT&,OC&s)Yg2.0VX!?2^9J;co".fCB.dMhJTDd(G!Dd_
%p$Z1J&YE)p@/?Li,(K`mWK[)=M,->4HM;%QOKY40ghESVO&N7rRo2<omC[9?!kC_&o])L+m*j*h#qUe^l'/TiO6o*IaDIqsFn!n)
%$AVL9SKM?ljM4/XQVn'l?P_#tqLk)06=Y=c5?I^BI+^-D2L_C)g!'D"ali"[-27AueU(C\)kR>!s'`Q)q!sUbe4Ch`F_Kh2-_9Wo
%Y%0ZBdr1g?WL3AWGA@;uh(8#7/Ns$%g\>;bVR9?F,JXAGn*?;_/)*jZ?a#A@SpejEX.TQ<jD]l\.o0#/DkCrR579"25XX[hC&q@8
%XZ!6ioj-]p[g\.uRQ4)";AZCMq0Mf.!D(WqRY)a^ef+W&KHgC"L+j\39&9@ZhcnfX[N<sa$6228FoBtp5N$+@*#U\_qq9ghICFr8
%&Tmpu*#[W8n+u3nWrD#7+dd`9'O2>ZZ`ie&8H&VF`m;A;miT2)1:BB\56l"p4Qt125PA-.iCMth='nN9]LU`@$2!_0,Clr%p#'&M
%;bO]M[[)9HB#En<>DKV.da",LK-e81r_`9\rBBu;Tm_3DO"eE&?>A[*Hr$;<Pr^nIs7cFEpLJBlEPO,rB'3[&B(-pX\Ce'9d!+9]
%7/-KBVLOA0o4R)G=_^q+cu\+?p>0i7ihb*Reh<Sc6\2r4g=MVPH*pbhIPSLlQLijF[2g5qk_M3hjMd&kJEMC[U6,_O`fu)\`Tn!5
%XD=P.Vpi'5?+Yn?l01b"W71?d-S[E%N&MuAnK*CEnV/Ctb4998bn#1q3#t10*'@-E`V3QTEWo5a([GXP`dHjHEirEXURJ.tf:moD
%IC5g).)83@;$k(87o5qpnDFDM6&KZmkTo3Z'@Vo@73Gd(e^SEDP'iO?`"KmQA^:;6*dEI.'I2rr(q`XVg-^dPmUiS5SI<6:S2gP4
%aL3S56]]:\edU>&OTr4"l5dk5;P?Ab+qKs5]*`%Z9mBe=/QH#s>,+3+jK3I.dCN#3*k3WZhM)Od2X2mF/etFIf@nl/^IJa*8i<ZG
%59orV$^L#EOX,WISP%GIW\TYf05K1][[4127%s4Pj-7S!.^^2>&`^U(GEV'&G]j9,C3RuegseW\[?K.VeV&KhWLZ/LF6B=<geQFk
%b@9E#_2qQk7_M1B77J#lb,Am/SUTPG;m:[M"MGS`[5"m&?EpFjm66@D/G;jqfltJI:a*J\11KlPU<tML`g(4uU&^H,GG?UQSr.%/
%FK=0uEcgWDOhuZA($g#27bWZ-@mtC:(6g#Dmutf6`2Ref=q0hlEoQEMn`dmKf-cF4aq1YIJS(s&;5s9Gb3CDY#)Z=ch!b[sr#43=
%=C_nUT<JOfCV&?$]"3Qr+O?,fgb'?YjT:W#U27/poVpE:O.obugF?!W?ZPWC!``*sJ].pNi1^meAB0m,,;^kdD$<nh#eeB7q,[!0
%/_RYDBKIHZb'LA&gd(28m'J:0p#$"p@3oVWcc)I5nKihS3jN.uI9u0fMPEQHQK:H8?MeH(g'0!af`CV<l)<QM;9ua:V]9NJ[:#b`
%G2P?+@EAlgP?ug/]#Q_5(qC9QeqTP&0Zn.8)8XT0"\2]"UgT`ShE`*oOB<1F8d`f*LpA^7*DBl*G+M\*JR"7I@54ObhIH6g*\;Vk
%(%BYkQ"pO9oo6@5n=o)kZ.0o+mQH1+f$ejm&M!0@M?no?@C(,^nW:+3L6f"X>M&86O[gf?OE':g#=fi/Gd!VV@bN\D(QJ:4`Cn3M
%%:qkQb\Vp&jE,]a+TFWNNrdYn'/JV]%OucB8KOSM`8[`EJ(J[Z6,&7=cAW(5i.8<YRleLIDRW,X:.>HFm4HlfN0JsDa[YH.85pns
%Q4Lu8-GCB=]T(fI^0.Oa7f,.u=rSlC.eW+B])u*_[0!enV'iXW!BBsf<V.l4_/Ri<e`p4tPJq8A'TMD3AV[BW$0EGJ3Bm`VdpRZ8
%/D=K-UrT2=9,5?B7bEsAVC0=9D-i5ZE[B#PeVHU*CF\=/.d\qeO5ZQ>%3om[1n$t!cp[,4H5p#.8MlD.IaC'[KSep_n/GK7oh[u>
%@JrXW@OXDCEmbrJ%V;Qpp@Bqr>O57$Yt(<>D+"LM8>ZEgA0e1-EaF`siFlK"L5BT&Bj=8:[%(K/bj5p5*%8p[\S?kYV4ZAZ9Mh6Z
%V*lR;:/PEkj%,s=OX?fIE`iTRfGKC[A/m.Ue^^&8C8eMKE\i3&os)\@)B66SB@(<b786N2#P+[3+S@CR.)k;(j&$#?B<5>D-PdZ'
%Cnn0dAMQh0ognZ$,EX;eBPO`V9c=,YdU3SohB/Z>HO)WL3'e;EZ2Q,K>&F1#QMHg,f^MlPO.L&&@7?J#h0Lo!6lLSo'Lqe-O$#o*
%-kk#nUfL`aJ%pH'^a/A7>CUGjRkOZhC6s>@7Oo&u<&p$U31e$(r[a%ho#\s)"PhbMU;rg6]j,B=7i/"&pKGO#fuDol:9j]-;BN<+
%iDpR1SgT*]=])cI/^e+K3P"G+cKiGAeTK^_h&'!@K0bK\9%=5afoPEQaq$mSp#HIM]EAX&!FB)!KO,>M8RpcZG2hs@Vk.Q<J)b&S
%lNs*+-WJE_;iDP>MJ`:<:KHO'5t`Q]\#Eg2hWB-XLAs*AM.RL&2X1UH>es3L(u4=$5#"tTF1jtlOk(2mZ.D5]GTbCJ?pc4f;5*CS
%@\R&eH@IVS>Huk_<_Al2XkbR7iIL[mQttfhmPi-KMuJ7g\hNEhKg25&4410;j*M`e+WTi()mijb<LO"Fc4)33R+(7/)_fPcN0=i.
%Ojlo>+'L%Gb/e',DV68tndS'.,-ScRfT:9TpsGJ"?+9;H3$%mkK7W%rMiI#[UfFBgL2"I7YDo*&G=I4s/d$`'D@aeDF'*S\7_Nkr
%'h?nX5otQN"7sqMPlbYa'KR-;nJ]QB!!8o`&dlmB+/fR'R*hW:lh*fS+ZLl4Bs<mnmONVc\_->?3p.S7cJOcRjg9p?SlTG#\tpI\
%`+9P#%<@OsAga8]p*#"Y?4K+=G8e>&1V=ldF\YE\TmdH2nHG_(NWjF"f]89P'k^K6d;A)AUY[D)[2Lo8TUo#F6$ji/2=<ZrPblYE
%^B8jBS4Eml"."_65o0IUBO(iHb`EE,9VsecSog#2!2&knVnhR8ZG.JEV<8t2Z_./J(Lc7;;fChr;NO@VTiA#A3%oF^`BTA1@O@ST
%O<tiiHss>AR8J['aBf`M<Kd^5OS@5l<S*Gn3nA&2"9$1UkolZFfWUWL@1O2ij=UO.1jCrjPQ^2_Uk--/KB5?t/f^MH<#aL@%X`s%
%R7M2]K;6tr>Z<geH8NK%L3ZaW"$OQBd%ctFPW#4lN\^=B(*\V%Srs%GR2rN5^tjYf/3Pe\8*GBRmpcRYOR%0qC]tn._gS>q!Y:f`
%I,Yt,AFY*hr`!u&@G:LkPgC"E36)iiMPY+4oo)P::a_;?7QfmCM"gdLn:3k@fQ!5&TE]f?`#n@a^+2_BkC*7I8!7VuO7FSC$/^k<
%i%M+4."Pap761+5hVMTdH_6GW.?G0"Ibh/W5;9j%6$s=CSUS3Gl[OW(CNW%\n=st*Bdt8\A]5kA#)S40[=jH[^I5Xk&n0TgB;/9l
%icaR9mhoY9Z7Q@hB8EJNK?k[0MQYY-$8TqY:Xgdgle376C=m^H:p$O&=YeFW<qRa1K0V;nCC+4MP-V6hrnf3tVQ50BdU3$\1`:ft
%8lG`md=tY'"e]TU%BKkg9EI^$#p5lk8P;C+=&Ci=\o)P(\sZMl8PYX6FK$*8[:UgY=genJrL0aWYREU-=b[fEQl8dmZi#^-R]RN"
%3[8(#1&r&*bVnOXMH(,'8=HC[BR(0F#6%%Z]m@6o7^$5t@soW''!o9,NtSKh&g&ha_:_)j!]U[(=3_!_(Vk%4$WRED(r1,_%&aUX
%1-jl_Gn::]`B(0SePmOt5#Z$5domo7Pa%g_BH&#sQW4\fP'H7)IKMD@Yg5#m/"6bBJn5XF3SZCWUnVRD_Q]9#VV)<Y":8GT1i`/.
%;NejB/E$(qPI@PX8K3BlCCai/<&+n-@ENoEJ6>-FJ!5QeS2.<YHFoufCLj+;c2fu)qa!pmH7:9>'FY7c>E`WG$rk2If2X!5/O`*s
%=mh()a\X1Q%GYL8aEBgfgK"mkbKuEX!XQSs]"p`S3247-lYCM`nHO,pCu!q@:iZshhOjlPM<@a]<J?VEC6.u"`E<R>->s@j&9j]B
%'jZB@6IT5-_$/l$?Qij&Kq!to2[TTg<r>3km]FR'0_Z?c%riDp?Vq(0'UZ$s$]5iun9JK^'9,2o'`\>I\OWrVicbrB"4Cj\dN\8k
%+>.\<%.XT*HB>oCJNb66!OG'[7W;$V%jKs\nbXtmLTQq?8HO;a.?&&%q*W,&0L/,S<Eh4L<GF:FEYp8=!!WoJ'cC10Cd8.()&+#T
%-A!+IdZdktfK/#g&Iik#<k;iEVCJ6,&5t@cU&[&-NTsZHcAe5GFHdGnALD$kUi(`"P[T+a0l0t8$ERci.&a);&PWH1K,#sAA;:1+
%)%p&7),qr5#m*g)UltrA6.lK&l_&rfrtHDg:Ku813Y7Ju+=mMe-UD)_7tU4h/T.\OC7]emCmD/T"L<."[K<_,F?3D'hrCXI3]8PU
%dGT$`1e#VoE@)!GC]?472!.3bnf0>`]KB[u(+S5CdtQ_I'/kZ(Y"&5JAuo&gFksGCf-isR'NN[S2-LV$^#fA2"DU1Fh'<=u3(p-M
%K&3nt-9rjZA>]Y]nH+e'FB9'QJdA]5941'q^Sq3$oSDeR#6H]LBJTEY!Q1>2''p2R0FQC*2_Y7@%,Pd"(WXtVKd>'t`!`Q&[Z6Kg
%.56;&2+:W8*XoPI#EH0",Vn&%^nW$M<Ih$P9ZZQ6O:p;BMF,OH5T>U^=]@E2PQqd@;FM+0,]-,\&qQo2i)*I+IZFVo\Y;#:!VFG#
%[FBieFK(*4)ob,g&0o!59MQ*(6]j5H`hXo;iBc_4H\9t5;=-XP=cd6H;Qq&ri6";X*^k*@ofO?6R"f2u]U%Ihbm<rrJ*XPg[G4'Y
%^qdb!G'`\J-8eZ-Opj3ffmlU</)CNJ!]+PIb.qjBmnc?>2D/LDPYC""%t]_jZ=#\,-3MXH[O`*QX/,ug,)EAs4]4_P(od\"n:@H%
%D(&e("F<IlXK\)]"t"kO_7NG7iAahp>-Nfn_]nb@WhC12!a=N+J-H()6s!o$I2;Z0[KR4ETc0;-*i-a"PA[*HLd2WnDOI/JEB/=s
%\H'*'Woh0K4L,HVHgMq1AFNOqmMNf9J2\qo(dQ,YWXlqF/p@VtR]<]YZ4'm7,7b'W[Uko'$;?G<&0iXY$EFO<'s\&V>/`nQS70JX
%<YEuWl*h@WL^pDU!1Mi?X/a9V$sQ%nf2Yi@qdYF+P`ZfK#P<c=[FC8rFQj+46FG/`#3h*kW"oGd"Lg3GE)_4tcEP)eYu!+U.Md9V
%5")>neHYbN!"Fn/!bG4Hpe?#Fd:8$./-6)\>1M_&TII+r<65XD.-rmdhSm850JIaTWEpRB.mcNT)RsBQnAfWVAeF;/AT3>K4b;b!
%"Vr4Gd)I<:<bDfoK+OqhYfDI^/C2*`21mK+&CFpCA[VSR^eU&\n65s#=,^O2#iP3'5:D6i`pGY4Mr&Q4#o_7A$t:;Y#A^LY!ifY@
%_W2qZU^JlX"/:nl'WDHV5fhmkP@PI6fV,'*%_^JU%h\c&'_Ho@*`Yo;=or.]Q5]*#+f=AHSJ[Ul#"J$he;N56W;1n`mji$Vn(U*;
%hZ_%SpXt7XAalHF(t7Qd?=OoP.qb4nq<Yj@5<bq0qp8",Nq.9>V/1&QgL]@Fr`'LjR>8btiE/8Z<fQ?T@F\J/es%'IDNjc`R!4'B
%)Zigtcn_<S\?o?oN`1l/@_/trB&5UDg)FGVJ^K)]Gd@)F</hh_^oB,!#WUb0;2"0hn<1FC_Sh'.2F6hc+WK9[NY/Y7MXePA380aN
%RjiFJ*N/:!(_D<$A0LGQ+Yn3TiWRB-B"Tf8Dm@7gPYKn`]ApiC&I'9fOUQdgMb/eCgc//&5(XM"0$-k/XN9Jp@h<jS]Jj:+%gW5l
%^lsJ'Z"gp:0\_AHLP#>P7\!lU[#O"U9\C@nh#S\n&9sA24'%:XG"51U?JqC;1f!7_g:Vd18NU5?I31G6W:ZU0_Jl)W(jpSb:aEqA
%F$hGcHr[EB1%o9-D+1i<JB&B*@Z)oL5Vu^*9hkk5k#_fgANK?.K.Cbqf"krCLk:5pKE`-4#XggK<@C7Qih97bh11O%;ZQKdauf`"
%jtOBHal86iSqJm[:iE?Rh_AtcS?uonHK0122XmZDBc8^egaF/B;WX]$$X/-4UmU.@X_MPa6rRq)9M/=(;sXjNgQF90!"cFL#WWRr
%,?^^t2OtVJJZUJ+1p<n`;8obZ.mX>.OX8P[W(M;F>6-h<6B`/=<t.9F#B\BfK*-CD^(8E.WaWJ/VJJAm8epmo4@8grXCCck]bjM2
%S1n1[2ZXFg;f29uX%YLr;URJ=P6C%kC#Gs[;oWro^aN4<YL*WKZ%[&t'm3*W#pq)<:^:HVO[bmV!WG-O5X_&sdpQ8eSS*i$aLXu\
%bEC']:\&2'Hf@(76?1!XO&FA"Mh%JI/3<*RA"hHg=rb6.9p_6gIjT1HXsqo^b=o]i\o#i<Q)^UYW+r!8l+B54+W.ZqRTRHU(R218
%M,,GUZ"FIOcor8;R'p!Wgo?1mBmW08.4Fo#FB'kpW+[<gi?k'Gi<`@thlpdd:,+G?MaPiJhVp>5PBdfh9;)hQ&4sH-Z_^fBo<QO1
%(W(.&o[It+HkbAU'?BD=#Y'eG.o!j,I("cRM0)p"'$NK=/.ci20nO^\af.oU%?ZFMSrF!$F^S/((<nANSiWGOa2@-K/7(nJ]o"'s
%60-bT\g?Y\MdTe`1]Z7S"Gj2f)1gfN29"*V(`u(ToI@(feNuao6ZC3GM1L.C(h>Nahoqad;,iJ<WL;t\^a,-C^uNs9?PK4W1T:MM
%.2KOUTi$_ui9(r!ZJRuiP?Q!1N=[+9IDFHbVVQPR#Wt/;X=2$*d(G+M)@-MpgYr5^)Um.lH.h1:Be'uMdKs]R$9!-9gqI7X8:(r=
%ZLENm,k7V_]MN>OA;-_.n<A#/9*PpZe7;[)87A;3$;UZ#]!tk:d$5!.lPUfa&RpmpK][C`lu@\l-pDY,S)X&feg']V=#H)?OR#Jc
%if(s#XUdldne9.oOt/a_#iO5D"R7ne:NR^Io?]gu+2KDt-S-.JZN1CI(9kd@lVrL<[g(EB,(hWNq.=>S.Hu)a*#Zg5OX:OfKNPX,
%X2M;34\GltC3X+)jOPp9YR)N&'b_&Qi-bp5B-M\;i!c$:_QD;X#DfJ(((Yq5AcY:93Xj4m*[OdLd,71G\)"Je>u1*&2e?IX/g-$#
%ka,&o$Y#P;)&Me#NN</%/X+7#[6^i(\BRM>Wb<FkbUa[h!^oT`'eLFX*e;Tje370P^mdV8naM^7@9Qu+$SQh#Rb-a-&Bp<=Wat%<
%L,X>ci2olpaVGPG,;c>he3^IN3CIJNb1e`N-r,htO\RS>ZLf"Sa4A9M)tC"XXr5::kL%;Rpr>G!'9g0!nAj?2m;V5G#$$F"roeF)
%(`:H(_Q#>]/$9f6]b1F=gqfF?pYKW<h?`ugEb*,meB)!!]]^E[R2$HH\?e<K3"G>_RJ/=4p-r/.5hLTC/]7u9@+CX<"0NOiGei@!
%'0_dApYKoLh?X2oMUO7=:8A*_rl9uJLoQY/CW'oH`+u6p^iu<Y2^<kY"ND8u,;dDSQJr%f\7Vi3(lpRUJ8FK`phgc>AuskjO[o\s
%M+(muGgT&Z1JU&qLDqTb3HYH!DA2bV,k-?207m[;IojqTL4?brj8iX0C9/!9eA^ksVX2R3mXRPaK4BVhO\dcbm@n?cE4Zs+N.CfT
%q=h%UGKNTAlKf/?9>EfOU#W+QR7oQP]KdW`"*;Z5]cGS_la?r4Z\90d/[Y!u,#hNYOcdTs-9l+/do8H'BF9A#P>',V`q;.rZYP+Z
%@HsAE"e(do/HHu_D&-EWTVPcd\#,O7IDT$(S-GFDHi`)ugkQ*CNT,j=(o3u,/P7>CKAP8Z,82r2UagA-j=l90-0bPi1^Wcufi[a"
%,r-C+Th.tBE)=>@FN+b5MQ'F,0T&S$771O!@NmN?#7jRs"tgmn(,PI85=f`20B$>._q$N6T+!MdLbpa2^&e?U-7Xk-rc&&rAgE#D
%_.,8M_^aKDVJ:jf]<eCc1s+YYWgF_:+d<rU7\FN"l,@Va"EbRh:p<p8SJj%?]N\ltrGL#R*!KE#_@QeUAYM&ZoD)Fkl33MGN'/57
%[8`Ej7jlROUb&1a;aXt1_o*[Z_.eCl=g79I+ej\i$BkM7.%;BK?uu_I'31itCK(n5?)LARDK7aji&p$2cl;5eE4YZu1i_[a:BG=#
%8>D'/5ug*tCtU</R7@F2Qkh%5`Og;V3'o/H,)<HU1@G5V2XksC+=ORQ$7^'S<^\<s-tN][KD'l`Yr*KEBY:&EbF3f1K'8H^&r%mr
%.8Qo+-"&KMhE@Y-Tk=GbXp>KQ2W[=kMUSE#/n/jg5>Y?R;I1-?.SE5(JDhqb7KHq*_4hl@&-FWkj%?%m2c*@;onN7X3g2DFVVHg(
%!h;gn%&"WEp*CU?7hlIWT#>%[RL78sC%.g:P-ZhFP?AhV24OsmWG5X::R4tO$!h,_R[U.DDud-l5r9(&k.VAFWUm'BOaE13+TE/#
%j\^mPTk$)9o<"?MRNT,BMd.PG]#GIBhHEAI@lAp7%Fd<:+haV%.cEF5R0f5fA>C[,'@aTZ3_F&4NSU'@9dY[m0mcg>QmujZa.?hs
%@f)UQo%Dr<$g\l:4L8Z;];ZHB-WDo[WFH'-&5uY-.;QFjK86^?GiTbc7"_=0l]tNbVJHtbB67C\W*[kp8*V7JeJ@YYNbjL$Lenp8
%PW2-lX`I\^b>B5Z;3<!B=u9"*1f+^HD@1FLQn\`5=!][*!(+CRNkiFuYPe`%Q_'MZ@8hdl5]apf91NE'd^4Y7``G'8c"';:M\^Q>
%e$:jn(KdZ\0:#7S6PoPu&>E:>egP/Z<A[Z]O-VI;Z$jeB!sq[Ze0>aWb-DnZU7B#mi[G,6BM4edqTbBe!@f[9KTIL16a4A7kXTX8
%!Ycq?RP['[6ZeWd.)SoekSe5[PX-e==V-1aY=ZOW2E+W8%+Q)FPQVr<>.1136<>IU9N6u%(RdH5R5q4I>ZIYWedTq-a[*;%&7FGR
%0MW';)lor)?:-ZY4c-9k'&K]U#c20g?_BJ2d>-ZPa;O(Fdia:8mjlF6q6=ZsUE=9k1&LKa8Nan?]H93ajhph2mP8?D\?M/1FkGNT
%61,J>@ld^9HZL/C$[[lpAFZb@EjMXg^3?*Y2oEN2%P<l.Q:oD8a^[?==>cs[McF7I[SuAI]1q'"@GjE`"9cc(+lG^R0r#$,CWna>
%<fIneQo5?0H1Ket'+YH(+?3uc#+o+V)7[Lhj+VBTB$B2X[$g^7PP:q"EF55p77F:K)-3:j<lQf(`JTtdP_]u+])a(&B.81+XP4PV
%A-0f.9<s_=':EAO(FM,_,`WV1]E.H6bJ_(+"s+H_7W?R:0NO/N$Kh8@Z%Be9c";oRn?c?ncBJ!7XPj*!4$mGshV$D9'n'_Y0h2']
%/&mL_:Yc/fe$PZ$qi4@iU]?B/E/5*EM7&tXi*gWS+s>e,;*_6s'GPS+oKX9u\&gkb<Cu7NdeQ'F\u:"ILS!d03DcO0m:';9jB*UO
%)j#cW[c>>94GmoNcj(X=<[>8:7a9Cn*kZ#WZ[sF;>aV7W9[Q\\+,bM4c/XXjoXO_J;D3W3pQIF[,#C5X,oOL['1SEU3i]3RGo7Pt
%.2sBtD9_(HV)$&tJ/%#0RfO:U`fU<oB?,hnTu"p7#J/dtc.a#S\kJTr4fN[/J:h;d5*fF4]K;::*E%uYcB/0^AQcCDdGJa]huF1o
%AeA]\PY;L=]nK6h@-]j$3]$:=5X0_H,pt$G-Vae5+dk)M7>eQo<?+*!#r$&fM$(_]Kk!dm+_?WhY+_^K`M9].Y8niJi$kV%,SI`\
%".(dL0kPknLgpHpb8.!"OX31W:)/m!D$_lCbG'EKP%r\p"HU.:[M5nh#lkqp?)tofnl3bR;o\R+3*hF$_NJHd!M_IF2-re=U@CF8
%J`HFT&]d(lXs/PU&jbbo.]0ZTq6aM`S&:H\@c=nMQ_jhk^2:poZ#iu>Kt&sq($Xj=hXh%]/D?GH1;M:p3sJ^GeA@(U\TC)-*IG`u
%9d6Q'B<1o,S2*NMTggjXY>/hM&g>0Dfp9,3;&3/T*=B_MiAJ^8*&-+2&8b!L+2XMXA@Lma$87-Qctp1%P@&84R^7X?i5p)0$/BEm
%%`-AunJ&R/oBWC*4@XWfAeY4)7Lj$^'bs_Ak$9?=U(6_O4$N\ITdO@@eXeIP;\l)_i'M$*l?#To'[9@J",99FR=u;<<JsK]]d:B+
%MX&6TbBL6B$>idOD%;_jmmq5K`nHnK_+8X(\0(CU.HkK^9!F`Z]Se)KO,(ti+q;3SD6O;=NA=@*f-qi?M46'K3:3qY6p\\+!e'9,
%Q^Sg>n$b:L.]k^')Q'22PW=JRC'/AndTWuq<H9M(YOEHP/!?7$VK"?p63]#`C>I5gG?Rt[rLaJ`>QLirGcP'b6pLcF<uiR64:+hH
%3,[C8-5a1\/I/5P)k7F><iABu>_-ns?Pk*rg5"U.l)CE\-OF<k9U1esl+#arZ_q8GGT@:3TfRlp2*Mt0&<1i8%")DP,[j'l9LrJi
%5m'[pBigDd_"b>$mO:jB67bqk9GgI%06)N"?Q.<cIRout=6UlJ]Jh6j?*\6]Bgc6u+!!/%;u6d";j]7%d?!7N)&/>AH@r_QXc'8h
%+RN,G<B>lNd0N(qj*a*.YDPd\Q8&h*F%FC;+u,9RpNT6QU()e#e&>^ZK:lTIJTVQ*1"g"`6%MmK8Jf5Ul&IF8.rOr>hU)K4]tQd"
%0ZBfB.dAsN#:a0)%r@i'"Q2X/Qi.arO._X+1(>r6&K9!^(H(4ir`D%Ll-D6I)#rW%fh#o8G<,4(drpBp4#pH!?8*>VA;Q4A1#+<W
%1QJ6LkqlkZ>$*MNZScUn^"]p-&b[7+e?5=\G&'Os30*CK=_u\j</okl:7Hn)4F(juM$M!3=E29:,`&I?@L8RB/QO\o</hJcR(=#P
%f?&@q9KXG>_mrKN"`HdAQPe[#*)"KU%TeW)_O3Fuhf\MHN&<^?=sigQ9cbtJMK'hP.q^SHAm@&ke84Ein6IC.NA0goi$<naKdXE?
%S,ai_@u1qpjJoJ:Pga7%4&4QM@GjH!?j+N.#E,$j,/QmNQn`$P)CI!sD%=;Ge@c_;4<XW`i0Y+$;)LfO*]7KP-p1Oi(PeWo&AI2S
%SMCS6bgqGR19N^&;S$)&IXmHI@u<pI:)WU_?@(EA1Do/HV0X?YYp#$)!3jI/4":(?!A%bB:oeW&9o6dVGj&2W'TFVXDL)_DUIWtJ
%+ffi#=.BJi`5E!'#hJg24rUBak2O0$lB4UsN[a5+7A>b@7M!3T^TmZ.(1M#-<ik'Y..8F<+(K7sqm:n:/</MGOI<!PJnZ>^1T5$J
%/JXK:A]tQTWHh.,]>^'a<B_6A(-YP*%&[&'7>0;?T?m[i:$7DLA5j0:NKD/UV(/#B1hB:L.s(PcWb,]a0c[*&HFXNA9lY&-h!(ID
%i9M'[;=Ht]++ht<-cNjri=$)p.Apt0`H0CnA/gTf&k(-8c,`PTHBbL8Tn"7us"I/.4H=,Zq3II`ZO@t4:9RHN#-].o'.$DR5tAtp
%GtZWNW37?n3Y0'X\=R.!lQ):gM"FM%^MAg&CteY:X6Cs)6jO2Td>-YEaU,83(]cG=BtW)<6NM+%A!/k$U5RC.Dh5*-X*>jm2<_?\
%a:F/pTgbsg'CPs22I"B8b(ll@5-$7*KrRNhRiYeMMRk+t.:TU85$rS(#X2,3moh,5@GA(UN]]rM\OIjR2,"-H"N?%XWlYfTj1GL<
%'W4T#_bCr'p,*oQ-LlrE_D+KU8pLm0DbbJ4[MZ<.6&ufFP`-7Q%$;5t&eCdJ5"]9n:_Fn")1[`"?<UG#_Ah$('ep6%ON$@!>MNbe
%GlWOiPbs?%d*Oap:83@WMH*7t/+Y&D\iNW-+8$=+foP$Taf4k$GKf5dj6ca_WteO$oO<VO=&ndN*:noYnKe_ccO;&q(q.N@K&/UQ
%W.U3;NUDS]R<jQ#1n'/Xg&^Z*WgmIZ2Af%KIATUc'iB1R4FsA;4%[<M!Dq+<,lBVs>rGt?Amimn9JUJDBkSCd^OBY_-<i]de"nE5
%rMF,BQlk&qadURkOXOp)$?_&@9e&'M;^V0qoe<@,dR?'9h:3th\"e^iA@hN9na7Vf<4WF9o>Wjl'H8oO`Z#"8e@qWuI-MXk=W2mK
%QZ97(WcKM*gAN[EefK:@6c$D^[R$@@hb?@lcAF03iKP2oF4I%sQ#+&/=lXd/=fCB[!ks+W=#Y!dWX2-\W?0n!0kKnONaO]o->Q%]
%0#@c?Of"6iKr@Vc!+`_I65<L_XN<lib5=d;GXOHJ$40iL`deBCW?,V/`I[</kt2e1%%f59:m&R*.'A78$(\+\%&_=B+K\?NNA.Vp
%c1r2r%u'SRCFX7*'82$"4omp+)Cs72(O0F`df&fhUu=UI._<o,f_H*[KU=#F,Ugsg<+5M<_W/Vd'aaOR67dKg!AB&HZD^<qNWV/o
%$'b7_0Zm$_6HKT[i0hXPh+5P7%&ZVB8D0F9)>nlS1ks,u=%Zs?rE(qSg!<_4@i54**SF"uhfDZc:=FB>)`p&_LKuVRjBs,jSr:RE
%!+IrkHjqQ[S&JI4@Q@W@k2/6qg`'\[!?Ng?)N*Y*Eb;a>?7fMmNT8W2@_+OjmBl]`DU\;kfXF(s+L2*hM'4RaZ(_MOO#g;]6)5fc
%&P8?N"5e+`h?XK"MV0+3<n)kF]#BN\E$DhPOW0Dk/l(bFl5&l[VX;X4msl5mq[,'PA8L\SMNdS;`efqbHP.i02Kf#4gVgc;"s+JC
%A@k!"=AkriL_H-i#q=ke-9:`gSD`J83V]aUpL[rTIi+R)?*$:F0D8MA?rg?KK#+Nnj+N&_/q`UNEGn;N%u@hB3+h6BF1T>H]sGk@
%'n,7iCTR=.e7J+iVs]dPGeem-pYgNH%'T!l^b4K=!$mL+7VV?"IXsqDGA&]![Xtt?0ibK;'Z8tln7<q1(86S<S<2sLO+70*T1,pc
%6S6hd3%H=n<8e9XbhoCO+&(Mt^($#E8KWJD?GijheM:7/(Kb&f4`%*LQVI38!Y>fsN6)S.MKg`^-8WPDBGAG;A3=`6DG>\+_FQ(h
%12:,N=O@,1XY9n(X)U;lateA8.g.B48&TpQ)W&?KI*_m":8_t(D+Q),]>3*f5pRu-cIXbqOHQK;X*/%!TP9]G`>QrR3cl98+eEu`
%lG:Et$]1%0TQPj!"R.3>[)$a.;0s^)IVY+2[.#8kGfPVX5_?QIHn]uQN`W]`EWDgimAV:IO-JFZFpW`0*M[A+.\GVH0j]HBU.!^!
%7)l$S[[-D5b.;6`gSck]hua`-YUqE9.ORioD$'!qjXc+'B,\&jJd<+O<Q*H&Pog"W0U3b'=62PTeA"IU[.4)p+!T)q@)!Tc.=+q)
%1l,nsEP%X&:+NHVnmDDQguU(5%fY!Pj.i"lY#5^m!N72fL4\7u=HOLQ,nh(rJQ&P0WN/ZI-PJ(N1)&BZcn$,42At0!k'tS/;BjZP
%Cg?$XC:;8d"3"2.(;B=5Og"jZ^;+AB^]F_[!k[/S[1RqfHm.:K.,1h5144Vo`2eugUa8l#(AN;L:_!h,1-[-rTo:hX+9\m.JJ<+i
%AN9@BKX#S-geH^IOrjQ]N1uQ$f\EZS5dp.);PM[>2&k@t3RPPj2P!7<;0E)-@Ls5Z#(5dhB,bs:nOZf=P_=b:GMn&g+"GKG,V!Vs
%=)_/r9-Q/S%CdjBc5=VGG0^MJE4D0IGhPU:Sc)=uZiq)1hCq9Q7A:Hn`O>O^$Oq3B7_)NI#[i\EA@NgUE.#8'7R8h<"%0$6Lk\j%
%Z0&AXSB<NQ-opN#3)NT68<;@S!Q@c)"A1.-$"@C$''IDmoT$EQT?7Q]q$D,1BSP1&W\KT5V]]0-6H'%7:_QP+Xp9-&L(B@'-8%%c
%kV:'ijeL%#Ke9:^BEN*.$f*"mH@4+Cebj:mS:_=&J4W#3Ao'Nm+R)0_ms+k:H<;;n<S<%VU&CunVL*QTb[sR>\SldENKgk@a7@2Q
%[LCmee*pJS,aP6[QN@;ODU'Gad&p^UK&)#FnLBil]BHd7%Bj_B(d[j<pr#2\R.lY#oA@suF!B6d9.[YV;%"4g0J9qZ<cBW_>T`_F
%2X]98`,SBn*:D`eX9L,-2@;C%8?taD7+:KFKO.&Er-IA`)ngHtiOqk/3q#?K+=N,U^>](#jEN`8Aso+[P=_fJ/H6tp58NK.e4fXq
%!_sXo*>iO!I:TB*\9muY8kWU>T\*`.7H3\n>j.PS!*p,['PAA$N3&-Pi'Y<-ZS]F'L,0.!8W#EeN[];_S>-VGK)n5s%=Eo/#dO38
%L0meYGi'gsRL:Zc``K`)UZ6>;1`H/nFAiK2^ji/hfgDleLtW32JurJ67u%,<4baT,!N>HP<(Zjk;Eo^fK;eM$RVZXb;SmC4EZ;&7
%k@as/@[";V^tujei/K9L#f39>B\9p31[G0>q?Y>8J]6'hjH-?QUGftNeNO,F=7Mlf>>5>16-&J4YUpAVXkEVe%aI/-,llhWDH6R`
%X.0;;e<G_6*XOWV#/CL!^)Vee=-kXGJHs"Mrp]K%5BS`68G:q98P`0UbKN?ANi_:2,F*>^H9_ou+TYL\N<^0R11'RKlpsqoHu%2d
%TGRd.<AAR'#=Pak`=3k5:t!3c9<]oDp3h`Y$uF/lJt\<kFN`Un>TiM6@n8nmYGh4Q*ld6r@<`@UqV2*u5]lm.]KDjB]@Xb-EJIC0
%6oWH\lgr`>T$+!UP0K871-Uc:/fR!EAu![a\[J'JAflpjG7_((\gTO6$5b.8&'r-_P5/rC+))N(S0\[_S0\^0;jpqbs)s//Sg,i6
%Q3Y@Y/dJ:Fj4I%5M?G1e704<t+or*G#WEh*BHEK<'H9&"?.[+2;t[>rEQU\(:X@uJ?)<5J!BnB_!=KlXU";L7B\FZ%,_P#Ucpgh[
%,Uma&!SL@/<A-<H"q"iDZj?;^I[H')N+0F$GF`-Kcl+3u2u2;mZ9@#pcL<:S0X))i>&:;``'R=uJBhUc%C>*T)-o\K6kbIC7cD5"
%!Y8B\RUFnUj+.BJc9fPZ'OBgk@'k#$"#LouiS_6i0B.>118k>0dKqZ%]s%QnE=<#+)h=n#a/?T$0N^WdW7N8+VUKKgg)CmnmTuR5
%h5"0f]LlsC,5NJSRp$/t0&2!kh&:M`M/"9Q@/:>g[W*E&5P>j0XrpCbKS'7?6HDc80,OE[JqeX'?A%)=MUs9qTG2ouLR-nl<<sqq
%=ZZ>7'5`7eliL0m2@-62i^l/9aUpiWqZ;iZ0D,A%f"`h&(d%&*YhEXP9CLscKT:C(6kVPh+"/$pDZnjF^'fonMqf_6d,>[gZ)QaM
%OA'Ts]"gXOXnDbZSJ/1m9[TSBkf2qQEWkCN_nkm:!t,Oe_.XOm8r?.>@g[6aq>g`?[MbfM5Hk\#>'rCN+U5[S8i*;a3Z4GkRSF9^
%MRGjUTr^>;`s8aOI,c%i2Qh)FntLjG?7@6.J_@siNem4-:Po\d",\7,qg`Pm&q+RlH=<__U?K=E_m*'6Oe?g_#L\,3p;:%=@Nl@K
%Q:s)1,ichl%_N%g0K4Z9Jjj2i8>rQDgK7PeA-V:Q_GK(\DnWGb;<4nKIf7H/ZEIq![\:R8M8dUh@%:nH7Kn_abqlF&`ebHbqE3e+
%!!C5tBKomrBV*U1(FGq:i,JrnQfEf"Xdrou(+BnJ=j,`u=X'5+#6>-e[)09oD=C50>G+Uh4?Wt`nmeUH?2K/+!"e=N*p7NoclNH"
%&VP8<<+IC'M-!YjA-A#H@AWStKaC'A,7HF)JqW#(*aZXQ5/1$LR.-4s1gsL>JV=(XKULSf:DL?;T5a5N4SiXk"878!5r15(GTh[Y
%G^>1oH$CR9"b<;/&l;(@SkRRXVjd1+b.%r_0!S2jK&Gs!6$dmn+MGZXI&C"#!t?1.kdB:s6*)-)klV\&^sF@:%4^;;>Ir,S^Sk)<
%o#5Zo*\SX(%?]D!'gdinJ-h\>XgrQFHgIMQB$`s8/7D4hLeo2!`d*,Js%>QZYGCFAoo6s?flJ4(dWVO&qOC4Z[*jP)eIO26J3i8P
%p:R6aFm1JJDe-]Wh%)&U^3gem]-'ebD5Q7^`fs&jNP-qV5WUt\<W0^"!#WRG[-*XkmF%o$(g(`opV@2h-=Ib<?.rs9k]5"tp4/iF
%&eOtMDj@"f6TZjU9(]_&/F@moJCOUKF_B/Ra_dU-]`J.gfk>)npfYRIEg$J()FtXsA7Z$*Z4T?=#>3nss#the_d]m^lLq1FmEpk<
%(`pB>`F9jNLZeR$YsKJHiFGlr-SFH$2It[:lm$`m_#4>A!W+nC0C<ClgBIO`ha3[c"ra^8OC>4[[,HGB"FiF9Ku_O4RjOhXaCXsW
%d[.LO$asmTY/$`Tr4u/,(5V!T+APe("O"R0@FeaOP=k(VfO_jU'@#U7o9>)TkLf8TN>npuTABS>@V3g>j/6;%fUL$$5%iO;nFhF2
%i%UjOE>O[-bIcKd-hOP1$&&V+UZZiN4JVJ'mRB14oEYsq(^G<g*b[XZmMt$lED#m[C0^2H[lm4S*lJiO#\&.qO(]WKQ3^G_<:EP&
%X[k4m,qLqWVG\)0i;Nk9.W-:"meIM,ar=FNAX"</ngQDF659[iYdlq7l!N]Z8-_jhga,7rC)L#1T#FqIhLS5l%M]-uZ8s77mZQA@
%bc3-.5(Qhh90t"2//;<h2gS6oT9DC;WQLsS:"D;PHTXgi@`enG,:=tds#WH_52as#ZP<#hVe*$*"#\pJZ+b@9-MV^a)pLd(@i]%d
%B(DU6U%eB`$5Z>TRjVcELt>g-EO(I@E*Gj#'nKu89l:JNF9m']B0nfF8unBKX<O-',M+O\S1.MHjU\=/Sqq+KaHXfeMq`k.mUSXU
%Q'%H;p2?ZU-h2f!/-JaMihf`u+1HC+lhQ5Lc(/'3jqi@q'<Mc^RoqJBFUQGG)DU2F6orH#Q$E:4rE7(FkH0bSTcn,JA\P_J&A\.7
%keO:mb]<Q:*60XWcPQ4H?*s'W.K%QcPigZ).`_f@)#X4>XUQ"&6aQo`b(sZ;6E>1/JBgP(^\':Xe=u%M""F;4]#j5R!YX$3,$7i@
%!4Sn;I2/.s9BR"Fo2mU)'BcG@MRsZk4[pU[ekPIVX5B:D?,-iJkJ(]JAF&j&JR'>L6/Ms3CDjQq;QdE^WtY[,ij40XKj'b`@f=Tk
%*1,<&,BM292)jG,'6EqLGb_`a,$H#/q/SJU$dXr<*^8)+FE;Uf.scA(/,[++C(D?q.I\uOVYoq3#IQbkcD,,M^?;`kjL^FfIIQU=
%!l+?Jo'![q/N_nOfGa[ZK?KJI41]7U?Z^PgiUQ\DoUQ6^]0Dl-iKFrH'ES!f1OL]&5;SDn7TN9"rJ`8Ih6%\Z21cFXR7sMM*)7J1
%\Ir#04]kQa#7QFje?;W.=i=sQ7t&5!,-Kqt=@YtFh<hb@d$n]d2Jog(o26YkB6-$G/P,OWPeS7sWZtU=O\-QgZM!eQn<%p)lQ0?5
%UP*psN93X"3@M_@RRq888q8*Ff0Tp&\TUa-13k4296QT.W"@O7`%>Un&&.UB1mq8K<`?H!2'c?[Q/TPiJSa+J<M5sIosY5#TA)1P
%(d'XLck(Xb^.Us07&'%I/H/=0dS=0n906@o";*Ds'8_(59rf!qlH!4sf7iTPW&'P_X%_99DCtdf,8>$NcYX1:`toDjl>@)c"Ed%2
%Rj).'[OMb_jKT@R&[IPcG/!^(pkQtRkZ(\4m525?RBoK"3cngrk@&U.]b6/M0Vi#/+@Tjged"3k$^S-P:.;i/Gd&Dt%SIW\Uj\WL
%HIPkaXO8YbO)e-]FWaC,.Z($oA='Xu5+*BB4ImBXdhJR>UP/bIm)i=^[.=54OYS')U*].l.i+>kRcdD_b<!kF!NFZRR0^]_TjG[D
%64BNU\kXZOHa2dK<b8RBb3!]s^tT/[Po_$.k^>Qfk9!CBfo'<@"-ou@\P'F,.a;K-U,r>/dp`Ro2:3f&$WWp^66ng,K*I_i*>OLp
%IQ8Y!=&eO+j%kI:Yo2%LhnHr[M!n6'&aKBn]<A]V"XeB-=(9i\j"J6@SRE;UXSu4)ZQKZUJ6YmuVZEb@+W',2?kk=o4\<k`P[L:E
%U><K$8cY<5OAs]3m\VHr6jf('?EUdU0sB4a"Gub"d)@nGa[R=NQlM_0-Q-Sc%f_I;\`:_[.3%n.RB%`^7VF((GESC,:P`lW]?&7H
%had1F`:$X!5MlI3>,p]]_d`=+1sF.C,g_6_YrXqDhf?H[D?t?0bP2F,X*C@*GcG3tj""Arg*?j)F-t'4$10J<*TP>P.&.=*mcjJ1
%MiSW:+"^nY91^8.Lp1n>q0[R/UiT@<Kp4G5pZ]PT'_Nn%'XRI4FWf,u]#o$2h5!'#PX#kUH:LQ3>tAMsn8<D/Ur8-V*hd*`7O)Go
%`*u(,"52#a.S;QFZV]cBdLtnaMK?s97/Bm,&SZJ>2lBLJ]QWojF/'TplKshXJXYWM[rkK*]3/TcatYMAGT]H5m;.DHs1CF5q)3CF
%Xk)NTCM56:bdQ0l-JJVm)G1H%OSWKJc;s>B\Ao%tfI,GVDUsL_IBmA5FLEW^DhD>)EUCKPSaU2Z]8)a;Xh=0"SYXYMX@lO[-@hE/
%gSd^hG+)2q,hh2:W^'ZD"7L'PEIXoQEMUa_S)P[2M'c`Q"I8,ZhOH?o7Ee;u.Q(X:;%O<oOQ'`+Nnp(clBP<JJ=:qSmh;)?_o2Sj
%XanNMXCfU=d6[-q(5:%)H/N;opamJXFMa1PJ9)+OO3q0G'G*oW,m0/uC)2`K.4]%mX^7[s8YX4UW7'DeCqg1ZO*Aae09h-9^Q<L(
%_'doGP/I2Wlh4-m/V#tJL0;`kT%#cdCeh.%al58n\^6Y,2d9"FT?Pe<Os^Te:kU*ZAC\O0`@NDDL>@HU2`s#8Ze+9L[E&e_k12b_
%HpGhk`-H3T33e43V32#6kMWT#E#_l_L,mVU).P8;94kc$=70^8arkq>O+b$8EfC!e?&@IuD=[[P#"OjA=<8l?>b/b>*`r/J-QG%'
%[)0f]bU'!:Z;kVUHU1DKAW'8"]UeHGS)leKp=@dR+^$m6agg-)6S@3+]\/JDI&RS^PL!e<E%r2tY$E]46uWIp,#pED\M?]/s5d5&
%PtI;c<iIB(Y[4qu-!)jM19PAHYcO`I/pL&IG3bK&Q-bT`I0S/IGS*,Y`?a^cLL^_RC>XJgMajVo4Rb<qH79t68&?,h0+m$6_[rbZ
%_Z$DI2Rs7DlIMHt`a_\6]#S?c8L2>UBfAq7ZX3'lNmmqV"TK[t%$i/Ef[rWZjuVa7B_A0b.<X,fWFAUKX>ZbI6V!q+<,!nhUK8"d
%+m)fCBa%AKASJUCbD<7K@'gEpI@cN&qG73f-@aS'fTB5sd")ogcn[f^-Zi1WRGBRrOW*u_)P!]XQ#B*4\[cT!%#R'.niA>Y7e,N=
%gg@_.`lELHfIei>O/RgXCuAk)qr1o,-@GiZH,j[UCX$omY6r%2@eJ.CdL;Vo$.T6)UtaSP"[A,mDfma^L-`9ua_G?;jaiL%p*g;l
%7+u'aR4*oC8Ni<&5.'.m[-OcMkr[QrIWqH'mCbS`p%\A!/gjH.EQj;q$,8SMW93&=)==hE<+KXSPE)9mJg8quHq$g]WpcbH'B0rP
%-Kc1$`H#%64SqU%[//dCHh*-Xa/`>UBX"_:m09KHLK-\tk;4>U*fi@J$^jgpn=ig>;8;1*Q2M%?q)Z((CnDml4c<MT@a^%,:9r4=
%=jdGpLJ5\*<c<Dg=6q\OCPeS)q!]`B4oM8h8!<$hRhG,XnjP&W5(MMTMT`i7\GD:kb`km=+jcA'[WUjUeM/N@e?n$SU?kj:Z4B,A
%D%8<i2paMDd8)"LUOo8pfH_N=`r>i6%No)Z'CF^R-4oBf3nV2m*I@nB"CBEQp!YQBPk'LXnb"<Q&oufZme\1]EG2d;EmuB<ACM,_
%pMWU/m^k60%K+>BMcJ];K,^*-nHU?4'#GSY&QN'O]+nd^8+DU^HqG:ga0JEL77>gO_CPDF`QR"[Xl/p?lhDF):?2#+DP((0SL>JX
%4>lBmGFS1NFjrj;/6CUX/iPNEI5gcZ-10<cK9pSD6nPej"N.r<!QW6qLi`93p0@;=o,ln1ZGRf'_#$EhmHk<D&b7*Y`js5e88TR+
%B3sp[SZKb!#;60mon@cPq-2+(1N7_HAf8dn3Wir'/,Q6j0MLLUK\_=,_<pLdM'pY(R4mUq59[6+e.2['i/sI]".TpJJG4\d&pf3i
%.Z@l-UB>)J=hauuA"4,/KGn4Y0Z;N&C&^6mCJ8O?IP47K>i"#jlKmG?\2lQGi'^h[]dI01ln2A:lq.d#,m:Eo^(r6!G\@\t[36RC
%7[AjA_WIuEY[`ldBQ58Egj\AV_?HMI?#d@]YN+HPJeo*&<:+;0>%\4H(/f@DOGG8M8?cPY)jn^)2?dLhE=mFCB60_n,F*?JOrO4_
%kVqSAI/f>u`suDaS>iLB_(:`c!<H9?E(O-,o&KZq=g.GQ7Ch7N8'0\TC0rM)jQ![J5<DM#bq^E2s.@GUJY&h]]F5p"U!taR1-C!m
%NfR6CKScqW;KhL91Nr3!s)A:a@Jf)_i6AmBJhAX$haKCK*m_jgC?Ze*NE2',@3hjWF)kfdN$LI]`cGmrO.V#BOf8<TqSkGu:K\Z(
%b0IfKdd9h+#\-#u2Z$%0KLFhQ=mMM5=Y0jH</#))/d(6f"mfU9LJPbFks#W%[bCS'HrJ(?2s&J4e2ZYP3'=m$PDWVkIeT]S)rEL8
%?IjOLp_;MThS"cXL5m55RoX?QPNqebHU>CHDGRSfM>1X?j#R?IMgNF5Dku7*@8XJR:Vm!%FaRGn53ti,%31[FHi+T5YLS@<CUFU5
%OF$u:Kc(pr"a@#TiPTDI_[Zek^hme?a%sP-H@=`N&"\H?[-W'D,!g/$1TM#27"j[Dk.X$.$Jt9`6/DLDID&tI<l]bBOl0h#MnY:=
%6#4a\]SmsnnuVnE-h>(7nch';N_JY.e2R]TSN#eTGl.sqd)q68D_jGlL51PF49`2#I1`=?PfDVZnW_0@4HQqeB9XIrr?,b&hSC-S
%G(Z=&)h#d&SYNe?:+:Z^OY<FhV1ZGTa=Y"?l2?c=cJIBfPumbup=JF2NYcM]r"Qg&j\rGD5.c$(.b[Vh\/jJW_=<EHO.V%$GMT`T
%4sZE_2/!:Q:7rTh8g)+AYM`ssP4.*-M#R#a[QV9dLORje2\i(-Q0^NDB`khALW<3,h7K7P*p%"cc`]R$=8KGT&g7BaG$qHcp(TP>
%m.""nHb;qf1l^/$$<iN5]R/05DPM)FT4,>JSWW)9K6VU=(>LAl_#cpY]JPMJi$c<8["&M,)rUSfj_W0(b4O/H;P$&9H%^)(j9ZH^
%V]1n>"0)44?A&4H;fFBcI$mZdY%#.MUe7bOKc9s+j<XO5b=)i=ogOe2%#J;-d#tTfFF0)XqoMG`E)`hG3.D8k#sqMG.)38Q^Q^sV
%2_2tndqNFN+c=kZgN*ec8J^e&)H4-e@hG=n(X)MKgmAXNRHWJ$rd+:.1OhKk+g6%l.plTs_,dBqRi'7?lH"O#Q>R4a*+Ine4+Qk+
%\F$QQ1Qq]Y5KNl00Vl0&RQfLom[S"@[A+DUUtl]?0V<NXAJK.,_HF0M6TeeI>+DEJhIiKJg4R?\94%tU@"Zr;8#q8sAG&HNF'\+l
%BMV>EVu1X.Xn.frp\]nC/[[hN-Ku[IQ.fo0NuNl[TAg*tDTpi9n"&sgVb>?K>+WqPQ*musL(S,9^2M#=<1HK.nPI:I1ZP9^F=-(q
%`MP-?NqhE*Ak.b4d[.1i>FC*JecWSs54.\\KprXH67^9jA]JmH;GALVp<22FT024E,s^[mUOL57%Qa,&F^rioL?#<a[%Yo#Thlpl
%`9]bS`N?`5Za\Za+K\%Ca!+*(ld]s!m;p%"'F%!u:^SKoPLp;F)ZjZheB!P_?Kf,`K(TK9+>GLUTukOlGSp%_;o\T"\N>sYPS8Q6
%i1aVTi_qWHjVCET)1.ep)8[[gYH7RZa2+@j7[@_Qm?/Ah7jII0Z9O4bei+4_WHcHY;Lg=mU+[r&8VnRJ_bKr9qY(VN:ug?1Pe8L-
%!Y[.[SBL4Kp60di]&7,ihKgKeigN[L==G?SA8/u_E?Wbh(Q]*cBBh#2l]_"Qo/(9B`I9%uR(cRn,467Kg0hCnII:1am1bIXN%LRc
%3eBOt'F,<AfWjX19BoaYdZ2_6K7LPVfoXON0kL\8b:F[QE`<rJn>in&'AZU+"=#u"/k_DG"d2HOep],o46BJ>*9aVtaRZ):=c$b!
%lsQJKUhM`<Q4ce'Ls8lP6!X^D0#fl3@m5+ZC[IG!jhAdJG9&Cnm(>>e6X6)kdjl[1TnT;^V3tJ)#(5i\8^*Zh7p53"?!!*qV_5BH
%NR(\:c@!@2*iph(VZCn^\Eq5h_jJd+`s;-=MO*H(7IBR7]\%qEJq9CU>J*44SMmHtN)6TfFpAnk9^S9FAa2.40@K7hj%XOeZ]GK)
%4&"e9pI#:h5EjgKc,FM`"tnmj_-:uG5YK.l"P\ld+DbF3J6LeUj+56*T=d9cgo;neOo%d;m]1p1Uo8Vnn%#h(5_4`f@eK:t7=9Z^
%[!9fUo3`B-n0oL1g;:e88?o=R$G@HeqqQmmXCb[gLG.N^\V;F'%Sj.5GB!=6e@%K<I/Sefk-l+L_LA?::bneVTTSs]9*[-?"Sa%p
%qV6"hMQ,^A9p.]"<s`-5H$X/YLe@T/jM'(&IgjP-QYq\SJ[\!1QWq"6Kdr6(SsV^j61cg3\%e'<8kY2_9(d(kjoI#rIU"R(of2)4
%Vu5j^;!O>)585W1BPG.:2:&T)4fuOSrcQSgmIE*7cS9e"!9^3(0%n[u[U3%F?X9FC,k$s6NH+3H]hlCh)^5Y$!YNR0+>F>>Wi'Tj
%[1-\<fY=\Dlb%&03)';?KqBfGnS!"97nQ^eYP6U?]S'Z:njN,tZ@Ss`93A8KZq$r-K#)Y,Db7r7p9gpmet;W/;Qt9$mIOE?e\pZ<
%Npu`uWQZoO"Y))SZECE=<`>Rf9G?HGIAf@*_`'cIi")7L:$]"m;?^=?'"l`rBjfI'.G>NeXdnBT#%TOAPcFEq]`G+:6Kq%lL]-U_
%mh/I)B^$;"A.]tP[.9;b"_\Z%Nt@s1#(]28>3[XiW7j"FVTDF[9KCcmTcg)7!@CTm(F<H;cc@(=)XXhBIF)PO$#P5bQDP](rVIQA
%()CNYVm:?r@08r(PU+N?MR/_r`N!N:)B+Wb@L@s]Hm@3nVY:l$96%]o(AsLM;@'1u4QL8(kI)Mt\7&BfTm@"SK:<&h7&`9PJ,U.A
%o'=Wco8\3uOc$Xt/Vsg$%IXs'C'Y#Q)3)bAl9D$t;aa>bLMBB8]l=%?=M;)r:pJ@Fn:=A!OmdK>(aXcUG?6eeOWHu_#7q\p+>Fu.
%G#%[Y&Q8=e&4l1j%"P@?fS;dJ,l"K?_>n)$P/hV.^T)U5o;u!73g(XKW#*$QUgJVKH1<["'pie*a%q(8nIMnFGjlI?MqG4*Y0B0W
%XegYd93!N/,BEE='p+BM;K\E97*N_/<EdbSSXg=.K5dIb__OB%aVGg&i<.2A<R*Ht$Z^U-3O02fo#UN6XWUO![2-lQV+YTZ,pPWE
%%!kT5,Cl_#/1/b$Km!kOe:EKS7hl7prDd$/\oiH7!a2$U3NEf*Z*h94E'NI'NfP0_@;;WW3j"DfrJbk\)KSYFfDT6r^U!^!Fmnl*
%dP\A21U@Et-'CJ%6(fGC("3neV#Lj==/F4j)_/oA(3'i;$felC4@dJ<R`D%?gJ/HDkT^rXp+Pc?T9k;Lp>>%^pr'?bpY"`=XO#Sd
%>Bl"S,I2seaGO,a+tbZk(tMCt[^2b'@b$`8`Dq3SD($.F.-'KC39+(nkZ5h9+Kh?ZZKGXE6i?qCrF_Q9iaEq/:]BjC?W6BfpaZ5o
%n`Nq:A9W@<k!2MB'kEq3??M_a<HL!(2L<uMAG]?aZD\gp`U)'VFr&M2*Mi:$e6%YZ@q,!%ncP1ec@lF*HJH]-Wfg3oT/Tec'h\(J
%8E:Ju.79[aQjS?$N=1Y::'LU:&eQ287l7Y#W`80L_PLP1:&::5#+/"_EEF(bEgr3.d@<u(;8Cf'=].Tk?9ZW?)p!,ok&6di"Vk"/
%XK((B@ZrkbcKBHTX(K:)%&0*"`G\9Q<]sbEh[4D*ZL!A"kTiNQPKekA]!*>PI[Fa_fiimf\Ejc8etFuiD[]A0=M],h2O%"ljH&3n
%m7;XU/R[K"(<pluR`uk;Ud8^*G-hBh6aXl=l3hF9mO/nGabJ4q6>arG%($RT65Tbj;1AKO@Nn]BQA4B$2Iq'm!7m!\-%+F$=sngt
%`\/t<@FapLb>7t(,AIQGD]lK+1$O">/4tm<J/Uu/f@cWZ`kZ$q1I255gsd!E=q"+?U(Y9D@V*Ui0.(<]Y)s)sN"IMBrhYglHJqO?
%9rXI@^QI`V`B[98)^JI_nk90I"c4sh7)_pnRXc(_F&r7<VDh?T$sn`tc[XO[@Co#,bToOiYh67K?;0K?"i!r)Op3_(\Y@R<8CHBV
%gS:23,1g.,9fh!5/XBZMg-IPf=e2c*,Y[P,iY8u<.\6iR79]!1fhg\$fm72])^WlgjON$m*q.8F1MX7OP(oYkU,P!=[t3k`CoCe1
%LJRi*@c-nP=ArJ3Lo5P/ApW;Q#d<`^+B*)YrMp&c&L-hq5];3/2H>HHda-L<BX<h?,kTDiO]V-*g-4ph_g+krgMJ?+DH=:I9G=Hs
%FrP2pU>n1]7BnLBRD7$LDJEm1=3D_U'&b5ha?H/&8bKD6D)Mjm[bE:l\(b&Y'i1p_:pKET@$MR#;,ctD9R3paW='+6@LGk(##*WK
%s5[60Xt:\AE7BK8D2h8n,HIk1mRmu@P9e;U."QOBh?rUP^dO9TO_(6h<OQI*5"5Cjkg$M`UsjlPdfg.M!@&ZK,ST;!D4Vn0Kg/N6
%IGr#p9)j`G6>d,+)eX_h1FL.-G\9%OEd0.[]=if0R-L+R>r7o*L=CQ:<UH5!.^4A\`S+Hg.[LBOoALDW7dh;E_GlBZOhk]7.i8)S
%Lu`!C("p:*K<DVo[%Z,jII`/3r2MB1pA)Xi.;Z'hf4RM^#[EmFMTBJIO4U\=6-ul["J8Bj_\HBppXrBb]ZY%Ie3C\mbp'<6Enep+
%9KRlP(huEm2g2E$C`R8[r8AU0WllVkPls4]l<o%Jd)*o(ApFL3W07bS3)qID6_`s,"ei]bd?qRu?7YK]ed4*1m41rVo70&:&t>VJ
%6\skq^]od-;Hg&5VP"K,O?e=fh(IS$&!oRUNQpHBUV9WOFdeaPE&AIf"_%i>(0(R([C&/1p;3PU`E)U;ZQa4m1;*&rG!C&+GXX:j
%CHE[mLt@^IpXq&PZ^CPt,Lq@>?^hAYm@M*/8_P_]fO8#>>6Y2k0O"!V2fM2PN\D?(FuZYEU*:0N*P@=R4V.L[J(U>V_hNsHoWd,n
%-o1n[!`MUL3NX3[J]&[.KGT'`-^S@Z$.<+FeZ6>,YI<q8n@&:s0(V1c57H))oo6.u^'r5f7Fa:1hR:q(7J=_9Bo8obXT,@t^(5A]
%7b_Z0X7UhN3k$2N]`Ace$%sEoJlotu+dbQ/IRrR]Qf#8'*N]5SUndc@*oOTu#@bW5(3O!keQIIc(R*a&q\@s+$tU7l<Q&?6e-i7D
%_D[K8Ro8l7$(;ork6*:gr1:IZ&Vl^dfFG92`GM)%do&1cFMGRca5oE9q:X'gZ3;u>ENGuk/GL@<#s/>!UT(QW%/H!'Vq_oRPlcIB
%g6qSQ1%hBG-,3.%Z7]cWhMn9*",33B"6BVL_B;YclUPMdREJ713%$8h&c8qNmL<^\9_fHEI^5b.9G:a/mBSTQPk\%*[Y-H3hY37G
%kM$_iJ[&9NAs)Fm8,<ctgia>S7Aj%[;@KN4d1RT,:2UVU;<J*,<i_nL%)VV),NQCJbj$i7$V7tAXQH,6"chJb=4DJbrpOJV7q,^4
%bf"6&S8e@6k9`@qA-pNfM1pc[MTccTJ$B7Gp;Qen1'Q4JWC2@.>o%Js;?@`iNOR2d!PA;hOAK"1?p02<0#2b:,GAm=I(<C-+?_+)
%K5)'Y(rVD&\7e\h@JC\%\I3/H(3Ii*+B:10U=ebQ5OoET0quG"@>e_MoDJE!+#h/Yj.,M?O4X#OFAk;c,:/V6,%r:1+Cm$W(j-iO
%k#P;YG(s,L9nuZXQ'Q'"6WX.=;SH=:hp$uOfo^l!WbhRuYTqTR$H9FhX5eL`k+F+C8(YpUX,`;g()8Op`3']s>GfPQ?+if-)Jal3
%:*bFd9-kHgJbH45R-OrRTmVR1=4(8Qcbers==jrC<s?;>c9-\,gu97PitBP6CicnB;0oH,M]Cj[D1BcJp"25V<%?38^[OECHC4ON
%?q(B)>R_CB&P.#)&E9HM,,*%d%dZM*_9CWm]!smlr2`[A*k\N(N`$:lnT_GPB?(c(ghK*D3TH/!H8OgD3ScBL:8l*a"m&t<SNa[Q
%$;$It@\RPFZpbJiY,a=%/^BXS;*)?$E`c[b[0c8AUlrjpN@bH@OJ==nC5ni=p2NkJp<D:aqD^9WFAk;_)+j<CL_8?sj^69.PH%T]
%D'-47<q8hl4B\NHMtuuc3G"5jo"dB;+,@MTO6T%*6sos4r.nT@Kr-m,WL&neKU9U^Yp2J+CVhg>3(&oS7qQY(I-nJ@R70ZpY?.m%
%N?HiTrjuLg0$usu[dnVu9i524lGKY7/^Q0'd<h-?>8&,1aq."46u1GoK<a)h4W\_C4;r^ckcuAQ7`6&a54C`tHC4IL:r3^\\2LSD
%B?L4,8sQ%mNFnB\.#[)BOWs\bYcgi6Q6WiF-rd2d-7IhViP%]bFJYK@'@2[3FUWXJ:(?[]B&b[7R1j%\%AD1@#NqDG+'KM6j$aa@
%"'Z+(D_tm_@e=m`=W]7@Am-o<8^(/hO-+$p<a947Z=BL[p2NkJpW_CbH:GI:a7dFb\PXWL`2WI1:?'g`5UJfY*I0e`VC:CCKJ*F^
%&mHFRA;AZu0b^[hq-hAAb_UiqFU@WB_i1N08-qp%84p3\&D/8c1ANVA1(h+c4HNr^(C9"tY9?DPB.t^;fB)=h7%lmC;mm6SDRl@4
%[Ph<SZD*Gg)(%I6bR.0pcV^_mkH@*KgHq,;]KSn26FQC"=%hM:o,H*nEp(R:[+mD6aGU5JmD&-S2gUkf+5fTn>$ThT:pp-(WffAr
%2S9&iNs/>d1deA'2+ggp;B4B2Jn+p3mA^t-p#IQj'bH;6_jE5_Ir1c-)/`/bW]V.YS#05O=N3_&!#89c3=C<Ll/gQW#%IP)O=naS
%<JtPmaWdU4,/mt5.Y`4L;!)Ub&1=3Ano1qDdUHhc2qIi8,nA\lCj1;t)a1b[SuAU<9e/fUiSp;q-^F+Md<g^4$CXdt'sZ("UW<gk
%5qXaVI6ggXI>8)ubLr!Ofhn$Pl9CL?q\=316Afcm4'DcrGep'.[Y;>m=RT+]7c[-[15RV!GEi`h\O#Dk`^M<+Jg/AFN59M8essgB
%b.#4H1eGiSr@jWGJnRB[H?-'$hkM,DOU!*caf$S_K$l3..a72TqeGqE16"?&)+YOF*[F<Nc/X3H_#)pN@H)dTDKJO0(+#[J."J0B
%qc*Y$8]A@2Ka)ZBC@M.1?Mbot>OOrGGfu=gc"<tA&3VC8Mqsf*J;T)L&3MW*MjT0CQ,%A_9SFm)R8.br6i?A\G@DVYO""7!q%nrX
%mt.L$Q/_JXj'b)m*]-e@=\_mP[i+m.(UUVnj4(-uNR^5G'ZZ2SZG3!Y.dsWJnO2W?lD<c]NjQ!I$dD,*;?M"+IB,[Qe-8Bq%@3C)
%e+GIf_UR97E]3"AFL<T1`9#S_O(M;UV]s]e>3!kAPL<u^pbGY-X-?])ac2LQe!$.[&@JR)7g$q4[,)A"VVqlEc^PqbnHTG=SH>:(
%m8+/NE<*g2#V^hdEk#e8EZa==X`pTbF#J*HHpe+bB\+_u@8>r0P*DTE\Q&8Epc2XI6/mAZ3kD$'FbPnk.V/(26?MKskmTq:rMF]2
%nmWJ*W'EcTi"otEfVR#jN#VM3Z35I)1\_N=d&6f+D6:-88/paF!&^lgGuCrh.tM#s-C>ZCLjg*2s89?8LKU0QR_)m[<P0oO2^c5D
%Ubf857=h)6ouWLZm$bi;HA8$bfRA(BeVI>b@T'(T[]^Hp+'EYlH%1cO>`5IQW3flt=f]c1-L:"F*BLRu.YfbIZ_F7Pk?m)Bnft5,
%-ITm2l$9E(R%gE=TQ`F`$C-i@(9+,)_!c9%.(*%UEQt%)VpAW/Hu#jHB'jC0kHOAa,Z$IWRRQ1PD,Pk*l;"`hBbeR8<O?1b-A8kH
%"a0MGd8W4X<+2d\'1+I(P,FaH4`59^*BrsV.sdTX+&UO*8TAU?dQ,fN9-eEW22E4V1>-Wm$1[.UK+oV'ImL?TXX)41q,?WVZ_8*A
%s+J[5hf@u:o@stqPjRI%1FcT-8>SMP@STD2*p"_M)Hl(LigHV]VNtc05+n\XP;;GE2Kht$?L/>0^<Co+8@7pX]uFZ_4C.@7VDrI`
%Zi0Q:NqDPDp]ZZJ5+p45V'"+7b@99%3eB0Xo8;jWS:r*IXlR"KCQ^(aZ:<[3&`i:,3NNb!+mU(SblB&Odk8&<%u%,UOi73X*GJCL
%M]!cZfI,R33e$,0@q?,lESZ2A(hENn`>KejO!3.@PkSoo.Zu`AM,*`6E7n1.;VcP1H^(a:bkQ-^g(6]c@*VL<"tEc,@]5k(34,Ch
%W>\+KBh`)Tf\@)dVATJknRRuO$!pE'04nbHmIOduG?UfoC__TDs,d!7r[OHik&J5`p;Js,.7:>d7*(FI><ZlDVIhJ*>0+geUj<tN
%gQ?78AOBcuQHIZ3JAd6&ESEtJ5jZ%\)`G2)DLEKh=g?cLFXtlaX)(i8B78e*8@Mt#KV5W?&%LJ(Oo5c_r-^WV.A^g8+PsPgZCEpV
%%NB>lOKp<C3lS[^V\s2*V%IDbT1Zj?IRY0<^,3qC1'!4IrbC^p"%s$[74=587+&]>W#Cbt/D<Se/LH0R?qK.2*28mo$DI\'fd/\\
%jC,;hG/Q=`8haa'Je@TfEikPI#5ThEaneF#oO<hi,sE_=0osDVg"\'89>f)[&/#;Z%CIAHNN^Tg\27QJ,b[Dd-W@dEm=d(;/3KBP
%p7jP;D4JKKIe]]Y^YjD?.Y:e/[WVZ$b7kM(.SZCcT@a+2kJnd)-ts67'h*1!.,.I2k_eTQOk]$Sc][DeE+:>AA-F*1CalQ"gMNT.
%f.6&tR5@X"Kd:c%._p=l2([;]%GR:c@0=f]$><gmR6IrFLNP^^lB<7Yc(,OU;jE149V?'d>-)`LSQUbW.!!rQ;A85&X=mMgW?\tm
%'$aK9r/>_;at@NuD+K#K*aD"JUF^A,*NHib:p51lj,14F#Feiq=eC'`lL9d/\5mK3id(]=6;E61P_GpP2ZW`HC0'J./Z1_-`<'=U
%*[Td\V.e6oWe!!>.q?$i/c8\Z6iRa!7LQS+/.-&X#gdU-c(tn>b@K2c5aY_T/upa:J/B;+<F3EmQ!cIa!6LMGc=0K2rXp5Qnmo.(
%2T6Il/E<?UIp`6Tn,>?GnK7f%+.")Kn&M(#n:q?upTHgZq8\!^q1o"Jl,TEGs1:MqpCDcNn^A"uq$WY=O8i5[lI2ATrpdc'kH@,M
%=Prl)rrqATrkNa8rStZje*he\s2cSLB)~>
%AI9_PrivateDataEnd
